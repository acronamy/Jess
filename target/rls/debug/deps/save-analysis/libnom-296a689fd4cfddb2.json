{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1","program":"/Users/acrockett/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--edition=2018","--crate-name","nom","/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"lexical\"","--cfg","feature=\"lexical-core\"","--cfg","feature=\"std\"","-C","metadata=296a689fd4cfddb2","-C","extra-filename=-296a689fd4cfddb2","--out-dir","/Users/acrockett/Developer/Code/Zig/Jess/target/rls/debug/deps","-L","dependency=/Users/acrockett/Developer/Code/Zig/Jess/target/rls/debug/deps","--extern","lexical_core=/Users/acrockett/Developer/Code/Zig/Jess/target/rls/debug/deps/liblexical_core-d4be305b503e8391.rmeta","--extern","memchr=/Users/acrockett/Developer/Code/Zig/Jess/target/rls/debug/deps/libmemchr-8319af911b05cfa1.rmeta","--cap-lints","allow","--cfg","stable_i128","--error-format=json","--sysroot","/Users/acrockett/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/acrockett/Developer/Code/Zig/Jess/target/rls/debug/deps/libnom-296a689fd4cfddb2.rmeta"},"prelude":{"crate_id":{"name":"nom","disambiguator":[8606930093970595464,202807140432810615]},"crate_root":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src","external_crates":[{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12480940028815742386,17133840292323062676]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","num":2,"id":{"name":"core","disambiguator":[12740277115278631702,12640810556085455126]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9032649326521538135,12667967411968509476]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10009283058736322418,8662397509334631840]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3924216512132021142,13433065908605684942]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[3030377414627030993,4885163689723098329]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13235301763130876389,11956675772311029582]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5839480494490908876,4697973287732230237]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1041246640194432752,18216372201816767321]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4759184321302818619,12022396673976004994]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[1295962249923865998,4753204618089216455]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11309261669264167917,12633313349437080871]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11563747115584760512,7975991426192958756]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[2660116328215505580,9545010463301493925]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":15,"id":{"name":"memchr","disambiguator":[17223802337948702515,16714926018472392358]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":16,"id":{"name":"lexical_core","disambiguator":[17813809531087286693,8076952841764755343]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[13888717731798273399,8866928022443948720]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":18,"id":{"name":"static_assertions","disambiguator":[17788878138563586294,3651611803394997268]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":19,"id":{"name":"arrayvec","disambiguator":[552451801756946623,3515418440925600073]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":20,"id":{"name":"nodrop","disambiguator":[13443456023964607644,7391978485248270776]}},{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","num":21,"id":{"name":"ryu","disambiguator":[6122738087294784407,15682179524671780089]}}],"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":0,"byte_end":16738,"line_start":1,"line_end":513,"column_start":1,"column_end":16}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":5974},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15771,"byte_end":15776,"line_start":452,"line_end":452,"column_start":19,"column_end":24},"alias_span":null,"name":"alloc","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":45},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15778,"byte_end":15783,"line_start":452,"line_end":452,"column_start":26,"column_end":31},"alias_span":null,"name":"boxed","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":2043},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15785,"byte_end":15788,"line_start":452,"line_end":452,"column_start":33,"column_end":36},"alias_span":null,"name":"cmp","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":1,"index":571},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15790,"byte_end":15801,"line_start":452,"line_end":452,"column_start":38,"column_end":49},"alias_span":null,"name":"collections","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":2214},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15803,"byte_end":15810,"line_start":452,"line_end":452,"column_start":51,"column_end":58},"alias_span":null,"name":"convert","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3220},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15812,"byte_end":15815,"line_start":452,"line_end":452,"column_start":60,"column_end":63},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":7164},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15817,"byte_end":15821,"line_start":452,"line_end":452,"column_start":65,"column_end":69},"alias_span":null,"name":"hash","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":3291},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15823,"byte_end":15827,"line_start":452,"line_end":452,"column_start":71,"column_end":75},"alias_span":null,"name":"iter","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":1118},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15829,"byte_end":15832,"line_start":452,"line_end":452,"column_start":77,"column_end":80},"alias_span":null,"name":"mem","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":1599},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15834,"byte_end":15837,"line_start":452,"line_end":452,"column_start":82,"column_end":85},"alias_span":null,"name":"ops","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":5118},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15839,"byte_end":15845,"line_start":452,"line_end":452,"column_start":87,"column_end":93},"alias_span":null,"name":"option","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":2,"index":5336},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15847,"byte_end":15853,"line_start":452,"line_end":452,"column_start":95,"column_end":101},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3254},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15855,"byte_end":15860,"line_start":452,"line_end":452,"column_start":103,"column_end":108},"alias_span":null,"name":"slice","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3407},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15862,"byte_end":15865,"line_start":452,"line_end":452,"column_start":110,"column_end":113},"alias_span":null,"name":"str","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3513},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15867,"byte_end":15873,"line_start":452,"line_end":452,"column_start":115,"column_end":121},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3783},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15875,"byte_end":15878,"line_start":452,"line_end":452,"column_start":123,"column_end":126},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":5,"index":3124},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15880,"byte_end":15886,"line_start":452,"line_end":452,"column_start":128,"column_end":134},"alias_span":null,"name":"borrow","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":1,"index":25},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15976,"byte_end":15983,"line_start":456,"line_end":456,"column_start":20,"column_end":27},"alias_span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15987,"byte_end":15989,"line_start":456,"line_end":456,"column_start":31,"column_end":33},"name":"v1","value":"","parent":{"krate":0,"index":34}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16073,"byte_end":16074,"line_start":464,"line_end":464,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16073,"byte_end":16074,"line_start":464,"line_end":464,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16073,"byte_end":16074,"line_start":464,"line_end":464,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16073,"byte_end":16074,"line_start":464,"line_end":464,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16073,"byte_end":16074,"line_start":464,"line_end":464,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16073,"byte_end":16074,"line_start":464,"line_end":464,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16073,"byte_end":16074,"line_start":464,"line_end":464,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":0,"byte_end":16738,"line_start":1,"line_end":513,"column_start":1,"column_end":16},"name":"","qualname":"::","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":68},{"krate":0,"index":117},{"krate":0,"index":133},{"krate":0,"index":473},{"krate":0,"index":761},{"krate":0,"index":806},{"krate":0,"index":926},{"krate":0,"index":1140},{"krate":0,"index":1144},{"krate":0,"index":1424},{"krate":0,"index":1537},{"krate":0,"index":1779},{"krate":0,"index":1796},{"krate":0,"index":1797}],"decl_id":null,"docs":" # nom, eating data byte by byte","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":14381,"byte_end":14403,"line_start":406,"line_end":406,"column_start":1,"column_end":23}},{"value":"warn(missing_doc_code_examples)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":14404,"byte_end":14439,"line_start":407,"line_end":407,"column_start":1,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15098,"byte_end":15101,"line_start":431,"line_end":431,"column_start":9,"column_end":12},"name":"lib","qualname":"::lib","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":15}],"decl_id":null,"docs":" Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does\n it, albeit there it is not public.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":15},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15747,"byte_end":15750,"line_start":451,"line_end":451,"column_start":11,"column_end":14},"name":"std","qualname":"::lib::std","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":34}],"decl_id":null,"docs":" internal std exports for no_std compatibility\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15661,"byte_end":15684,"line_start":449,"line_end":449,"column_start":3,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":15947,"byte_end":15954,"line_start":455,"line_end":455,"column_start":13,"column_end":20},"name":"prelude","qualname":"::lib::std::prelude","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":35}],"decl_id":null,"docs":" internal reproduction of std prelude\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/util.rs","byte_start":16926,"byte_end":16936,"line_start":8,"line_end":8,"column_start":11,"column_end":21},"name":"HexDisplay","qualname":"::util::HexDisplay","value":"HexDisplay","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"decl_id":null,"docs":" Helper trait to show a byte slice as a hex dump\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/util.rs","byte_start":16840,"byte_end":16863,"line_start":6,"line_end":6,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/util.rs","byte_start":17028,"byte_end":17034,"line_start":11,"line_end":11,"column_start":6,"column_end":12},"name":"to_hex","qualname":"::util::HexDisplay::to_hex","value":"fn (&self, chunk_size: usize) -> String","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a hex dump, returning the owned\n string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/util.rs","byte_start":17190,"byte_end":17201,"line_start":15,"line_end":15,"column_start":6,"column_end":17},"name":"to_hex_from","qualname":"::util::HexDisplay::to_hex_from","value":"fn (&self, chunk_size: usize, from: usize) -> String","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a hex dump beginning at `from` address, returning the owned\n string.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/util.rs","byte_start":20632,"byte_end":20639,"line_start":161,"line_end":161,"column_start":8,"column_end":15},"name":"dbg_dmp","qualname":"::util::dbg_dmp","value":"fn <'a, F, O, E> (f: F, context: &'static str) -> impl Fn(&'a [u8]) -> IResult<&'a [u8], O, E>","parent":null,"children":[],"decl_id":null,"docs":" Prints a message and the input if the parser fails","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/util.rs","byte_start":20601,"byte_end":20624,"line_start":160,"line_end":160,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":68},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":2062},{"krate":0,"index":2074},{"krate":0,"index":2071},{"krate":0,"index":2065},{"krate":0,"index":2067},{"krate":0,"index":2077},{"krate":0,"index":2093},{"krate":0,"index":2091},{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":90},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":106},{"krate":0,"index":2095},{"krate":0,"index":2212},{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2203},{"krate":0,"index":2201},{"krate":0,"index":2200},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116}],"decl_id":null,"docs":" Error management","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16304,"byte_end":16316,"line_start":478,"line_end":478,"column_start":1,"column_end":13}}]},{"kind":"Trait","id":{"krate":0,"index":69},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":22535,"byte_end":22545,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"ParseError","qualname":"::error::ParseError","value":"ParseError<I>: Sized","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75}],"decl_id":null,"docs":" this trait must be implemented by the error type of a nom parser","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":22630,"byte_end":22645,"line_start":16,"line_end":16,"column_start":6,"column_end":21},"name":"from_error_kind","qualname":"::error::ParseError::from_error_kind","value":"fn (input: I, kind: ErrorKind) -> Self","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" creates an error from the input position and an [ErrorKind]\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":22893,"byte_end":22899,"line_start":21,"line_end":21,"column_start":6,"column_end":12},"name":"append","qualname":"::error::ParseError::append","value":"fn (input: I, kind: ErrorKind, other: Self) -> Self","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" combines an existing error with a new one created from the input\n position and an [ErrorKind]. This is useful when backtracking\n through a parse tree, accumulating error context on the way\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":23027,"byte_end":23036,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"name":"from_char","qualname":"::error::ParseError::from_char","value":"fn (input: I, _: char) -> Self","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" creates an error from an input position and an expected character\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":23246,"byte_end":23248,"line_start":30,"line_end":30,"column_start":6,"column_end":8},"name":"or","qualname":"::error::ParseError::or","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" combines two existing error. This function is used to compare errors\n generated in various branches of [alt]\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":23529,"byte_end":23540,"line_start":37,"line_end":37,"column_start":6,"column_end":17},"name":"add_context","qualname":"::error::ParseError::add_context","value":"fn (_input: I, _ctx: &'static str, other: Self) -> Self","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" create a new error from an input position, a static string and an existing error.\n This is used mainly in the [context] combinator, to add user friendly information\n to errors when backtracking through a parse tree\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":24020,"byte_end":24030,"line_start":59,"line_end":59,"column_start":8,"column_end":18},"name":"make_error","qualname":"::error::make_error","value":"fn <I, E> (input: I, kind: ErrorKind) -> E","parent":null,"children":[],"decl_id":null,"docs":" creates an error from the input position and an [ErrorKind]\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":24329,"byte_end":24341,"line_start":66,"line_end":66,"column_start":8,"column_end":20},"name":"append_error","qualname":"::error::append_error","value":"fn <I, E> (input: I, kind: ErrorKind, other: E) -> E","parent":null,"children":[],"decl_id":null,"docs":" combines an existing error with a new one created from the input\n position and an [ErrorKind]. This is useful when backtracking\n through a parse tree, accumulating error context on the way\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2062},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":24724,"byte_end":24736,"line_start":75,"line_end":75,"column_start":12,"column_end":24},"name":"VerboseError","qualname":"::error::VerboseError","value":"VerboseError { errors }","parent":null,"children":[{"krate":0,"index":2064}],"decl_id":null,"docs":" this error type accumulates errors and their position when backtracking\n through a parse tree. With some post processing (cf `examples/json.rs`),\n it can be used to display user friendly error messages\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":24654,"byte_end":24679,"line_start":73,"line_end":73,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":2064},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":24867,"byte_end":24873,"line_start":78,"line_end":78,"column_start":7,"column_end":13},"name":"errors","qualname":"::error::VerboseError::errors","value":"std::vec::Vec<(I, error::VerboseErrorKind)>","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" list of errors accumulated by `VerboseError`, containing the affected\n part of input data, and some context\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2078},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":25106,"byte_end":25113,"line_start":86,"line_end":86,"column_start":3,"column_end":10},"name":"Context","qualname":"::error::VerboseErrorKind::Context","value":"VerboseErrorKind::Context(&'static str)","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" static string added by the `context` function\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2081},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":25199,"byte_end":25203,"line_start":88,"line_end":88,"column_start":3,"column_end":7},"name":"Char","qualname":"::error::VerboseErrorKind::Char","value":"VerboseErrorKind::Char(char)","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" indicates which character was expected by the `char` function\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2084},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":25259,"byte_end":25262,"line_start":90,"line_end":90,"column_start":3,"column_end":6},"name":"Nom","qualname":"::error::VerboseErrorKind::Nom","value":"VerboseErrorKind::Nom(ErrorKind)","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":" error kind given by various nom parsers\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2077},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":25033,"byte_end":25049,"line_start":84,"line_end":84,"column_start":10,"column_end":26},"name":"VerboseErrorKind","qualname":"::error::VerboseErrorKind","value":"VerboseErrorKind::{Context, Char, Nom}","parent":null,"children":[{"krate":0,"index":2078},{"krate":0,"index":2081},{"krate":0,"index":2084}],"decl_id":null,"docs":" error context for `VerboseError`\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":24928,"byte_end":24953,"line_start":81,"line_end":81,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":99},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":26240,"byte_end":26247,"line_start":125,"line_end":125,"column_start":8,"column_end":15},"name":"context","qualname":"::error::context","value":"fn <I, E, F, O> (context: &'static str, f: F) -> impl Fn(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" create a new error from an input position, a static string and an existing error.\n This is used mainly in the [context] combinator, to add user friendly information\n to errors when backtracking through a parse tree\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":26207,"byte_end":26232,"line_start":124,"line_end":124,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":26799,"byte_end":26812,"line_start":141,"line_end":141,"column_start":8,"column_end":21},"name":"convert_error","qualname":"::error::convert_error","value":"fn (input: &str, e: VerboseError<&str>) -> crate::lib::std::string::String","parent":null,"children":[],"decl_id":null,"docs":" transforms a `VerboseError` into a trace with input position information\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":26768,"byte_end":26791,"line_start":140,"line_end":140,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2096},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29289,"byte_end":29292,"line_start":222,"line_end":222,"column_start":3,"column_end":6},"name":"Tag","qualname":"::error::ErrorKind::Tag","value":"ErrorKind::Tag","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2098},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29296,"byte_end":29302,"line_start":223,"line_end":223,"column_start":3,"column_end":9},"name":"MapRes","qualname":"::error::ErrorKind::MapRes","value":"ErrorKind::MapRes","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2100},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29306,"byte_end":29312,"line_start":224,"line_end":224,"column_start":3,"column_end":9},"name":"MapOpt","qualname":"::error::ErrorKind::MapOpt","value":"ErrorKind::MapOpt","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2102},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29316,"byte_end":29319,"line_start":225,"line_end":225,"column_start":3,"column_end":6},"name":"Alt","qualname":"::error::ErrorKind::Alt","value":"ErrorKind::Alt","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2104},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29323,"byte_end":29328,"line_start":226,"line_end":226,"column_start":3,"column_end":8},"name":"IsNot","qualname":"::error::ErrorKind::IsNot","value":"ErrorKind::IsNot","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2106},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29332,"byte_end":29335,"line_start":227,"line_end":227,"column_start":3,"column_end":6},"name":"IsA","qualname":"::error::ErrorKind::IsA","value":"ErrorKind::IsA","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2108},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29339,"byte_end":29352,"line_start":228,"line_end":228,"column_start":3,"column_end":16},"name":"SeparatedList","qualname":"::error::ErrorKind::SeparatedList","value":"ErrorKind::SeparatedList","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2110},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29356,"byte_end":29377,"line_start":229,"line_end":229,"column_start":3,"column_end":24},"name":"SeparatedNonEmptyList","qualname":"::error::ErrorKind::SeparatedNonEmptyList","value":"ErrorKind::SeparatedNonEmptyList","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2112},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29381,"byte_end":29386,"line_start":230,"line_end":230,"column_start":3,"column_end":8},"name":"Many0","qualname":"::error::ErrorKind::Many0","value":"ErrorKind::Many0","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2114},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29390,"byte_end":29395,"line_start":231,"line_end":231,"column_start":3,"column_end":8},"name":"Many1","qualname":"::error::ErrorKind::Many1","value":"ErrorKind::Many1","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2116},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29399,"byte_end":29407,"line_start":232,"line_end":232,"column_start":3,"column_end":11},"name":"ManyTill","qualname":"::error::ErrorKind::ManyTill","value":"ErrorKind::ManyTill","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2118},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29411,"byte_end":29416,"line_start":233,"line_end":233,"column_start":3,"column_end":8},"name":"Count","qualname":"::error::ErrorKind::Count","value":"ErrorKind::Count","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2120},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29420,"byte_end":29429,"line_start":234,"line_end":234,"column_start":3,"column_end":12},"name":"TakeUntil","qualname":"::error::ErrorKind::TakeUntil","value":"ErrorKind::TakeUntil","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2122},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29433,"byte_end":29444,"line_start":235,"line_end":235,"column_start":3,"column_end":14},"name":"LengthValue","qualname":"::error::ErrorKind::LengthValue","value":"ErrorKind::LengthValue","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2124},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29448,"byte_end":29458,"line_start":236,"line_end":236,"column_start":3,"column_end":13},"name":"TagClosure","qualname":"::error::ErrorKind::TagClosure","value":"ErrorKind::TagClosure","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2126},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29462,"byte_end":29467,"line_start":237,"line_end":237,"column_start":3,"column_end":8},"name":"Alpha","qualname":"::error::ErrorKind::Alpha","value":"ErrorKind::Alpha","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2128},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29471,"byte_end":29476,"line_start":238,"line_end":238,"column_start":3,"column_end":8},"name":"Digit","qualname":"::error::ErrorKind::Digit","value":"ErrorKind::Digit","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2130},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29480,"byte_end":29488,"line_start":239,"line_end":239,"column_start":3,"column_end":11},"name":"HexDigit","qualname":"::error::ErrorKind::HexDigit","value":"ErrorKind::HexDigit","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2132},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29492,"byte_end":29500,"line_start":240,"line_end":240,"column_start":3,"column_end":11},"name":"OctDigit","qualname":"::error::ErrorKind::OctDigit","value":"ErrorKind::OctDigit","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2134},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29504,"byte_end":29516,"line_start":241,"line_end":241,"column_start":3,"column_end":15},"name":"AlphaNumeric","qualname":"::error::ErrorKind::AlphaNumeric","value":"ErrorKind::AlphaNumeric","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2136},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29520,"byte_end":29525,"line_start":242,"line_end":242,"column_start":3,"column_end":8},"name":"Space","qualname":"::error::ErrorKind::Space","value":"ErrorKind::Space","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2138},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29529,"byte_end":29539,"line_start":243,"line_end":243,"column_start":3,"column_end":13},"name":"MultiSpace","qualname":"::error::ErrorKind::MultiSpace","value":"ErrorKind::MultiSpace","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2140},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29543,"byte_end":29556,"line_start":244,"line_end":244,"column_start":3,"column_end":16},"name":"LengthValueFn","qualname":"::error::ErrorKind::LengthValueFn","value":"ErrorKind::LengthValueFn","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2142},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29560,"byte_end":29563,"line_start":245,"line_end":245,"column_start":3,"column_end":6},"name":"Eof","qualname":"::error::ErrorKind::Eof","value":"ErrorKind::Eof","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2144},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29567,"byte_end":29573,"line_start":246,"line_end":246,"column_start":3,"column_end":9},"name":"Switch","qualname":"::error::ErrorKind::Switch","value":"ErrorKind::Switch","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2146},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29577,"byte_end":29584,"line_start":247,"line_end":247,"column_start":3,"column_end":10},"name":"TagBits","qualname":"::error::ErrorKind::TagBits","value":"ErrorKind::TagBits","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2148},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29588,"byte_end":29593,"line_start":248,"line_end":248,"column_start":3,"column_end":8},"name":"OneOf","qualname":"::error::ErrorKind::OneOf","value":"ErrorKind::OneOf","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2150},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29597,"byte_end":29603,"line_start":249,"line_end":249,"column_start":3,"column_end":9},"name":"NoneOf","qualname":"::error::ErrorKind::NoneOf","value":"ErrorKind::NoneOf","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2152},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29607,"byte_end":29611,"line_start":250,"line_end":250,"column_start":3,"column_end":7},"name":"Char","qualname":"::error::ErrorKind::Char","value":"ErrorKind::Char","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2154},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29615,"byte_end":29619,"line_start":251,"line_end":251,"column_start":3,"column_end":7},"name":"CrLf","qualname":"::error::ErrorKind::CrLf","value":"ErrorKind::CrLf","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2156},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29623,"byte_end":29634,"line_start":252,"line_end":252,"column_start":3,"column_end":14},"name":"RegexpMatch","qualname":"::error::ErrorKind::RegexpMatch","value":"ErrorKind::RegexpMatch","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2158},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29638,"byte_end":29651,"line_start":253,"line_end":253,"column_start":3,"column_end":16},"name":"RegexpMatches","qualname":"::error::ErrorKind::RegexpMatches","value":"ErrorKind::RegexpMatches","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2160},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29655,"byte_end":29665,"line_start":254,"line_end":254,"column_start":3,"column_end":13},"name":"RegexpFind","qualname":"::error::ErrorKind::RegexpFind","value":"ErrorKind::RegexpFind","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2162},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29669,"byte_end":29682,"line_start":255,"line_end":255,"column_start":3,"column_end":16},"name":"RegexpCapture","qualname":"::error::ErrorKind::RegexpCapture","value":"ErrorKind::RegexpCapture","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2164},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29686,"byte_end":29700,"line_start":256,"line_end":256,"column_start":3,"column_end":17},"name":"RegexpCaptures","qualname":"::error::ErrorKind::RegexpCaptures","value":"ErrorKind::RegexpCaptures","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2166},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29704,"byte_end":29714,"line_start":257,"line_end":257,"column_start":3,"column_end":13},"name":"TakeWhile1","qualname":"::error::ErrorKind::TakeWhile1","value":"ErrorKind::TakeWhile1","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2168},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29718,"byte_end":29726,"line_start":258,"line_end":258,"column_start":3,"column_end":11},"name":"Complete","qualname":"::error::ErrorKind::Complete","value":"ErrorKind::Complete","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2170},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29730,"byte_end":29733,"line_start":259,"line_end":259,"column_start":3,"column_end":6},"name":"Fix","qualname":"::error::ErrorKind::Fix","value":"ErrorKind::Fix","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2172},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29737,"byte_end":29744,"line_start":260,"line_end":260,"column_start":3,"column_end":10},"name":"Escaped","qualname":"::error::ErrorKind::Escaped","value":"ErrorKind::Escaped","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2174},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29748,"byte_end":29764,"line_start":261,"line_end":261,"column_start":3,"column_end":19},"name":"EscapedTransform","qualname":"::error::ErrorKind::EscapedTransform","value":"ErrorKind::EscapedTransform","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2176},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29768,"byte_end":29776,"line_start":262,"line_end":262,"column_start":3,"column_end":11},"name":"NonEmpty","qualname":"::error::ErrorKind::NonEmpty","value":"ErrorKind::NonEmpty","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2178},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29780,"byte_end":29786,"line_start":263,"line_end":263,"column_start":3,"column_end":9},"name":"ManyMN","qualname":"::error::ErrorKind::ManyMN","value":"ErrorKind::ManyMN","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2180},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29790,"byte_end":29793,"line_start":264,"line_end":264,"column_start":3,"column_end":6},"name":"Not","qualname":"::error::ErrorKind::Not","value":"ErrorKind::Not","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2182},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29797,"byte_end":29808,"line_start":265,"line_end":265,"column_start":3,"column_end":14},"name":"Permutation","qualname":"::error::ErrorKind::Permutation","value":"ErrorKind::Permutation","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2184},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29812,"byte_end":29818,"line_start":266,"line_end":266,"column_start":3,"column_end":9},"name":"Verify","qualname":"::error::ErrorKind::Verify","value":"ErrorKind::Verify","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2186},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29822,"byte_end":29831,"line_start":267,"line_end":267,"column_start":3,"column_end":12},"name":"TakeTill1","qualname":"::error::ErrorKind::TakeTill1","value":"ErrorKind::TakeTill1","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2188},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29835,"byte_end":29846,"line_start":268,"line_end":268,"column_start":3,"column_end":14},"name":"TakeWhileMN","qualname":"::error::ErrorKind::TakeWhileMN","value":"ErrorKind::TakeWhileMN","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2190},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29850,"byte_end":29857,"line_start":269,"line_end":269,"column_start":3,"column_end":10},"name":"ParseTo","qualname":"::error::ErrorKind::ParseTo","value":"ErrorKind::ParseTo","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2192},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29861,"byte_end":29869,"line_start":270,"line_end":270,"column_start":3,"column_end":11},"name":"TooLarge","qualname":"::error::ErrorKind::TooLarge","value":"ErrorKind::TooLarge","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2194},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29873,"byte_end":29883,"line_start":271,"line_end":271,"column_start":3,"column_end":13},"name":"Many0Count","qualname":"::error::ErrorKind::Many0Count","value":"ErrorKind::Many0Count","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2196},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29887,"byte_end":29897,"line_start":272,"line_end":272,"column_start":3,"column_end":13},"name":"Many1Count","qualname":"::error::ErrorKind::Many1Count","value":"ErrorKind::Many1Count","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2198},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29901,"byte_end":29906,"line_start":273,"line_end":273,"column_start":3,"column_end":8},"name":"Float","qualname":"::error::ErrorKind::Float","value":"ErrorKind::Float","parent":{"krate":0,"index":2095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2095},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29275,"byte_end":29284,"line_start":221,"line_end":221,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"ErrorKind::{Tag, MapRes, MapOpt, Alt, IsNot, IsA, SeparatedList, SeparatedNonEmptyList, Many0, Many1, ManyTill, Count, TakeUntil, LengthValue, TagClosure, Alpha, Digit, HexDigit, OctDigit, AlphaNumeric, Space, MultiSpace, LengthValueFn, Eof, Switch, TagBits, OneOf, NoneOf, Char, CrLf, RegexpMatch, RegexpMatches, RegexpFind, RegexpCapture, RegexpCaptures, TakeWhile1, Complete, Fix, Escaped, EscapedTransform, NonEmpty, ManyMN, Not, Permutation, Verify, TakeTill1, TakeWhileMN, ParseTo, TooLarge, Many0Count, Many1Count, Float}","parent":null,"children":[{"krate":0,"index":2096},{"krate":0,"index":2098},{"krate":0,"index":2100},{"krate":0,"index":2102},{"krate":0,"index":2104},{"krate":0,"index":2106},{"krate":0,"index":2108},{"krate":0,"index":2110},{"krate":0,"index":2112},{"krate":0,"index":2114},{"krate":0,"index":2116},{"krate":0,"index":2118},{"krate":0,"index":2120},{"krate":0,"index":2122},{"krate":0,"index":2124},{"krate":0,"index":2126},{"krate":0,"index":2128},{"krate":0,"index":2130},{"krate":0,"index":2132},{"krate":0,"index":2134},{"krate":0,"index":2136},{"krate":0,"index":2138},{"krate":0,"index":2140},{"krate":0,"index":2142},{"krate":0,"index":2144},{"krate":0,"index":2146},{"krate":0,"index":2148},{"krate":0,"index":2150},{"krate":0,"index":2152},{"krate":0,"index":2154},{"krate":0,"index":2156},{"krate":0,"index":2158},{"krate":0,"index":2160},{"krate":0,"index":2162},{"krate":0,"index":2164},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2170},{"krate":0,"index":2172},{"krate":0,"index":2174},{"krate":0,"index":2176},{"krate":0,"index":2178},{"krate":0,"index":2180},{"krate":0,"index":2182},{"krate":0,"index":2184},{"krate":0,"index":2186},{"krate":0,"index":2188},{"krate":0,"index":2190},{"krate":0,"index":2192},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2198}],"decl_id":null,"docs":" indicates which parser returned an error\n","sig":null,"attributes":[{"value":"allow(deprecated, missing_docs)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29232,"byte_end":29265,"line_start":220,"line_end":220,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":110},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":30012,"byte_end":30024,"line_start":279,"line_end":279,"column_start":8,"column_end":20},"name":"error_to_u32","qualname":"::error::error_to_u32","value":"fn (e: &ErrorKind) -> u32","parent":null,"children":[],"decl_id":null,"docs":" converts an ErrorKind to a number\n","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":29946,"byte_end":29966,"line_start":277,"line_end":277,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":32692,"byte_end":32703,"line_start":340,"line_end":340,"column_start":10,"column_end":21},"name":"description","qualname":"<ErrorKind>::description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" converts an ErrorKind to a text description\n","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":32612,"byte_end":32632,"line_start":338,"line_end":338,"column_start":3,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":120},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":46064,"byte_end":46071,"line_start":13,"line_end":13,"column_start":10,"column_end":17},"name":"IResult","qualname":"::internal::IResult","value":"Result<(I, O), Err<E>>","parent":null,"children":[],"decl_id":null,"docs":" Holds the result of parsing functions","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2215},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":46312,"byte_end":46319,"line_start":19,"line_end":19,"column_start":3,"column_end":10},"name":"Unknown","qualname":"::internal::Needed::Unknown","value":"Needed::Unknown","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" needs more data, but we do not know how much\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2217},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":46361,"byte_end":46365,"line_start":21,"line_end":21,"column_start":3,"column_end":7},"name":"Size","qualname":"::internal::Needed::Size","value":"Needed::Size(usize)","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":" contains the required data size\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2214},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":46250,"byte_end":46256,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Needed","qualname":"::internal::Needed","value":"Needed::{Unknown, Size}","parent":null,"children":[{"krate":0,"index":2215},{"krate":0,"index":2217}],"decl_id":null,"docs":" Contains information on needed data if a parser returned `Incomplete`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":46450,"byte_end":46458,"line_start":26,"line_end":26,"column_start":10,"column_end":18},"name":"is_known","qualname":"<Needed>::is_known","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" indicates if we know how many bytes we need\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":46609,"byte_end":46612,"line_start":32,"line_end":32,"column_start":10,"column_end":13},"name":"map","qualname":"<Needed>::map","value":"fn <F> (self, f: F) -> Needed","parent":null,"children":[],"decl_id":null,"docs":" Maps a `Needed` to `Needed` by applying a function to a contained `Size` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":46590,"byte_end":46599,"line_start":31,"line_end":31,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2234},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":47634,"byte_end":47644,"line_start":57,"line_end":57,"column_start":3,"column_end":13},"name":"Incomplete","qualname":"::internal::Err::Incomplete","value":"Err::Incomplete(Needed)","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":" There was not enough data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2237},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":47700,"byte_end":47705,"line_start":59,"line_end":59,"column_start":3,"column_end":8},"name":"Error","qualname":"::internal::Err::Error","value":"Err::Error(E)","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":" The parser had an error (recoverable)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2240},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":47868,"byte_end":47875,"line_start":63,"line_end":63,"column_start":3,"column_end":10},"name":"Failure","qualname":"::internal::Err::Failure","value":"Err::Failure(E)","parent":{"krate":0,"index":2232},"children":[],"decl_id":null,"docs":" The parser had an unrecoverable error: we got to the right\n branch and we know other branches won't work, so backtrack\n as fast as possible\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2232},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":47591,"byte_end":47594,"line_start":55,"line_end":55,"column_start":10,"column_end":13},"name":"Err","qualname":"::internal::Err","value":"Err::{Incomplete, Error, Failure}","parent":null,"children":[{"krate":0,"index":2234},{"krate":0,"index":2237},{"krate":0,"index":2240}],"decl_id":null,"docs":" The `Err` enum indicates the parser was not successful","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":47949,"byte_end":47962,"line_start":68,"line_end":68,"column_start":10,"column_end":23},"name":"is_incomplete","qualname":"<Err<E>>::is_incomplete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" tests if the result is Incomplete\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":48154,"byte_end":48161,"line_start":77,"line_end":77,"column_start":10,"column_end":17},"name":"convert","qualname":"<Err<E>>::convert","value":"fn <F> (e: Err<F>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" automatically converts between errors if the underlying type supports it\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":156},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":50224,"byte_end":50235,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"InputLength","qualname":"::traits::InputLength","value":"InputLength","parent":null,"children":[{"krate":0,"index":157}],"decl_id":null,"docs":" abstract method to calculate the input length\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":50355,"byte_end":50364,"line_start":25,"line_end":25,"column_start":6,"column_end":15},"name":"input_len","qualname":"::traits::InputLength::input_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" calculates the input length, as indicated by its name,\n and the name of the trait itself\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":50340,"byte_end":50349,"line_start":24,"line_end":24,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":168},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":50939,"byte_end":50945,"line_start":52,"line_end":52,"column_start":11,"column_end":17},"name":"Offset","qualname":"::traits::Offset","value":"Offset","parent":null,"children":[{"krate":0,"index":169}],"decl_id":null,"docs":" useful functions to calculate the offset between slices and show a hexdump of a slice\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":51032,"byte_end":51038,"line_start":54,"line_end":54,"column_start":6,"column_end":12},"name":"offset","qualname":"::traits::Offset::offset","value":"fn (&self, second: &Self) -> usize","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" offset between the first byte of self and the first byte of the argument\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":180},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":51832,"byte_end":51839,"line_start":94,"line_end":94,"column_start":11,"column_end":18},"name":"AsBytes","qualname":"::traits::AsBytes","value":"AsBytes","parent":null,"children":[{"krate":0,"index":181}],"decl_id":null,"docs":" Helper trait for types that can be viewed as a byte slice\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":51890,"byte_end":51898,"line_start":96,"line_end":96,"column_start":6,"column_end":14},"name":"as_bytes","qualname":"::traits::AsBytes::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" casts the input type to a byte slice\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":193},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":52904,"byte_end":52910,"line_start":155,"line_end":155,"column_start":11,"column_end":17},"name":"AsChar","qualname":"::traits::AsChar","value":"AsChar","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"decl_id":null,"docs":" transforms common types to a char for basic token parsing\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":52959,"byte_end":52966,"line_start":158,"line_end":158,"column_start":6,"column_end":13},"name":"as_char","qualname":"::traits::AsChar::as_char","value":"fn (self) -> char","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" makes a char from self\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":52944,"byte_end":52953,"line_start":157,"line_end":157,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53155,"byte_end":53163,"line_start":165,"line_end":165,"column_start":6,"column_end":14},"name":"is_alpha","qualname":"::traits::AsChar::is_alpha","value":"fn (self) -> bool","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" tests that self is an alphabetic character","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53140,"byte_end":53149,"line_start":164,"line_end":164,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53271,"byte_end":53282,"line_start":170,"line_end":170,"column_start":6,"column_end":17},"name":"is_alphanum","qualname":"::traits::AsChar::is_alphanum","value":"fn (self) -> bool","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" tests that self is an alphabetic character\n or a decimal digit\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53256,"byte_end":53265,"line_start":169,"line_end":169,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53356,"byte_end":53368,"line_start":173,"line_end":173,"column_start":6,"column_end":18},"name":"is_dec_digit","qualname":"::traits::AsChar::is_dec_digit","value":"fn (self) -> bool","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" tests that self is a decimal digit\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53341,"byte_end":53350,"line_start":172,"line_end":172,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53439,"byte_end":53451,"line_start":176,"line_end":176,"column_start":6,"column_end":18},"name":"is_hex_digit","qualname":"::traits::AsChar::is_hex_digit","value":"fn (self) -> bool","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" tests that self is an hex digit\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53424,"byte_end":53433,"line_start":175,"line_end":175,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53524,"byte_end":53536,"line_start":179,"line_end":179,"column_start":6,"column_end":18},"name":"is_oct_digit","qualname":"::traits::AsChar::is_oct_digit","value":"fn (self) -> bool","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" tests that self is an octal digit\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53509,"byte_end":53518,"line_start":178,"line_end":178,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53606,"byte_end":53609,"line_start":182,"line_end":182,"column_start":6,"column_end":9},"name":"len","qualname":"::traits::AsChar::len","value":"fn (self) -> usize","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" gets the len in bytes for self\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":53591,"byte_end":53600,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":235},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":56124,"byte_end":56133,"line_start":309,"line_end":309,"column_start":11,"column_end":20},"name":"InputIter","qualname":"::traits::InputIter","value":"InputIter","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":243}],"decl_id":null,"docs":" abstracts common iteration operations on the input type\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":236},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":56265,"byte_end":56269,"line_start":313,"line_end":313,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::InputIter::Item","value":"type Item;","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" the current input type is a sequence of that `Item` type.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":237},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":56479,"byte_end":56483,"line_start":317,"line_end":317,"column_start":8,"column_end":12},"name":"Iter","qualname":"::traits::InputIter::Iter","value":"type Iter: Iterator<Item = (usize, Self::Item)>;","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" an iterator over the input type, producing the item and its position\n for use with [Slice]. If we're iterating over `&str`, the position\n corresponds to the byte index of the character\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":238},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":56589,"byte_end":56597,"line_start":320,"line_end":320,"column_start":8,"column_end":16},"name":"IterElem","qualname":"::traits::InputIter::IterElem","value":"type IterElem: Iterator<Item = Self::Item>;","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" an iterator over the input type, producing the item\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":56701,"byte_end":56713,"line_start":323,"line_end":323,"column_start":6,"column_end":18},"name":"iter_indices","qualname":"::traits::InputIter::iter_indices","value":"fn (&self) -> Self::Iter","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" returns an iterator over the elements and their byte offsets\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":56785,"byte_end":56798,"line_start":325,"line_end":325,"column_start":6,"column_end":19},"name":"iter_elements","qualname":"::traits::InputIter::iter_elements","value":"fn (&self) -> Self::IterElem","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" returns an iterator over the elements\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":56875,"byte_end":56883,"line_start":327,"line_end":327,"column_start":6,"column_end":14},"name":"position","qualname":"::traits::InputIter::position","value":"fn <P> (&self, predicate: P) -> Option<usize>","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" finds the byte position of the element\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":57037,"byte_end":57048,"line_start":331,"line_end":331,"column_start":6,"column_end":17},"name":"slice_index","qualname":"::traits::InputIter::slice_index","value":"fn (&self, count: usize) -> Option<usize>","parent":{"krate":0,"index":235},"children":[],"decl_id":null,"docs":" get the byte offset from the element's position in the stream\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":244},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":57134,"byte_end":57143,"line_start":335,"line_end":335,"column_start":11,"column_end":20},"name":"InputTake","qualname":"::traits::InputTake","value":"InputTake: Sized","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246}],"decl_id":null,"docs":" abstracts slicing operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":57223,"byte_end":57227,"line_start":337,"line_end":337,"column_start":6,"column_end":10},"name":"take","qualname":"::traits::InputTake::take","value":"fn (&self, count: usize) -> Self","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" returns a slice of `count` bytes. panics if count > length\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":57339,"byte_end":57349,"line_start":339,"line_end":339,"column_start":6,"column_end":16},"name":"take_split","qualname":"::traits::InputTake::take_split","value":"fn (&self, count: usize) -> (Self, Self)","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" split the stream at the `count` byte offset. panics if count > length\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":277},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":59889,"byte_end":59907,"line_start":449,"line_end":449,"column_start":11,"column_end":29},"name":"UnspecializedInput","qualname":"::traits::UnspecializedInput","value":"UnspecializedInput","parent":null,"children":[],"decl_id":null,"docs":" Dummy trait used for default implementations (currently only used for `InputTakeAtPosition`).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":278},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":60104,"byte_end":60123,"line_start":454,"line_end":454,"column_start":11,"column_end":30},"name":"InputTakeAtPosition","qualname":"::traits::InputTakeAtPosition","value":"InputTakeAtPosition: Sized","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":289}],"decl_id":null,"docs":" methods to take as much input as possible until the provided function returns true for the current element","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":279},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":60262,"byte_end":60266,"line_start":458,"line_end":458,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::InputTakeAtPosition::Item","value":"type Item;","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" the current input type is a sequence of that `Item` type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":60522,"byte_end":60539,"line_start":464,"line_end":464,"column_start":6,"column_end":23},"name":"split_at_position","qualname":"::traits::InputTakeAtPosition::split_at_position","value":"fn <P, E> (&self, predicate: P) -> IResult<Self, Self, E>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" looks for the first element of the input type for which the condition returns true,\n and returns the input up to this position","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":60952,"byte_end":60970,"line_start":474,"line_end":474,"column_start":6,"column_end":24},"name":"split_at_position1","qualname":"::traits::InputTakeAtPosition::split_at_position1","value":"fn <P, E> (&self, predicate: P, e: ErrorKind) -> IResult<Self, Self, E>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" looks for the first element of the input type for which the condition returns true\n and returns the input up to this position","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":61351,"byte_end":61377,"line_start":482,"line_end":482,"column_start":6,"column_end":32},"name":"split_at_position_complete","qualname":"::traits::InputTakeAtPosition::split_at_position_complete","value":"fn <P, E> (&self, predicate: P) -> IResult<Self, Self, E>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" looks for the first element of the input type for which the condition returns true,\n and returns the input up to this position","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":61792,"byte_end":61819,"line_start":492,"line_end":492,"column_start":6,"column_end":33},"name":"split_at_position1_complete","qualname":"::traits::InputTakeAtPosition::split_at_position1_complete","value":"fn <P, E> (&self, predicate: P, e: ErrorKind) -> IResult<Self, Self, E>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" looks for the first element of the input type for which the condition returns true\n and returns the input up to this position","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2487},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":66694,"byte_end":66696,"line_start":643,"line_end":643,"column_start":3,"column_end":5},"name":"Ok","qualname":"::traits::CompareResult::Ok","value":"CompareResult::Ok","parent":{"krate":0,"index":2486},"children":[],"decl_id":null,"docs":" comparison was successful\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2489},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":66735,"byte_end":66745,"line_start":645,"line_end":645,"column_start":3,"column_end":13},"name":"Incomplete","qualname":"::traits::CompareResult::Incomplete","value":"CompareResult::Incomplete","parent":{"krate":0,"index":2486},"children":[],"decl_id":null,"docs":" we need more data to be sure\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2491},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":66773,"byte_end":66778,"line_start":647,"line_end":647,"column_start":3,"column_end":8},"name":"Error","qualname":"::traits::CompareResult::Error","value":"CompareResult::Error","parent":{"krate":0,"index":2486},"children":[],"decl_id":null,"docs":" comparison failed\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2486},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":66644,"byte_end":66657,"line_start":641,"line_end":641,"column_start":10,"column_end":23},"name":"CompareResult","qualname":"::traits::CompareResult","value":"CompareResult::{Ok, Incomplete, Error}","parent":null,"children":[{"krate":0,"index":2487},{"krate":0,"index":2489},{"krate":0,"index":2491}],"decl_id":null,"docs":" indicates wether a comparison was successful, an error, or\n if more data was needed\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":341},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":66829,"byte_end":66836,"line_start":651,"line_end":651,"column_start":11,"column_end":18},"name":"Compare","qualname":"::traits::Compare","value":"Compare<T>","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344}],"decl_id":null,"docs":" abstracts comparison operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":66897,"byte_end":66904,"line_start":653,"line_end":653,"column_start":6,"column_end":13},"name":"compare","qualname":"::traits::Compare::compare","value":"fn (&self, t: T) -> CompareResult","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" compares self to another value for equality\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":67208,"byte_end":67223,"line_start":661,"line_end":661,"column_start":6,"column_end":21},"name":"compare_no_case","qualname":"::traits::Compare::compare_no_case","value":"fn (&self, t: T) -> CompareResult","parent":{"krate":0,"index":341},"children":[],"decl_id":null,"docs":" compares self to another value for equality\n independently of the case.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":365},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":69899,"byte_end":69908,"line_start":769,"line_end":769,"column_start":11,"column_end":20},"name":"FindToken","qualname":"::traits::FindToken","value":"FindToken<T>","parent":null,"children":[{"krate":0,"index":367}],"decl_id":null,"docs":" look for a token in self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":69965,"byte_end":69975,"line_start":771,"line_end":771,"column_start":6,"column_end":16},"name":"find_token","qualname":"::traits::FindToken::find_token","value":"fn (&self, token: T) -> bool","parent":{"krate":0,"index":365},"children":[],"decl_id":null,"docs":" returns true if self contains the token\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":388},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":70962,"byte_end":70975,"line_start":821,"line_end":821,"column_start":11,"column_end":24},"name":"FindSubstring","qualname":"::traits::FindSubstring","value":"FindSubstring<T>","parent":null,"children":[{"krate":0,"index":390}],"decl_id":null,"docs":" look for a substring in self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":71050,"byte_end":71064,"line_start":823,"line_end":823,"column_start":6,"column_end":20},"name":"find_substring","qualname":"::traits::FindSubstring::find_substring","value":"fn (&self, substr: T) -> Option<usize>","parent":{"krate":0,"index":388},"children":[],"decl_id":null,"docs":" returns the byte position of the substring if it is found\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":403},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":72394,"byte_end":72401,"line_start":877,"line_end":877,"column_start":11,"column_end":18},"name":"ParseTo","qualname":"::traits::ParseTo","value":"ParseTo<R>","parent":null,"children":[{"krate":0,"index":405}],"decl_id":null,"docs":" used to integrate str's parse() method\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":72554,"byte_end":72562,"line_start":880,"line_end":880,"column_start":6,"column_end":14},"name":"parse_to","qualname":"::traits::ParseTo::parse_to","value":"fn (&self) -> Option<R>","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" succeeds if `parse()` succeeded. The byte slice implementation\n will first convert it to a &str, then apply the `parse()` function\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":415},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":73007,"byte_end":73012,"line_start":900,"line_end":900,"column_start":11,"column_end":16},"name":"Slice","qualname":"::traits::Slice","value":"Slice<R>","parent":null,"children":[{"krate":0,"index":417}],"decl_id":null,"docs":" slicing operations using ranges","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":73093,"byte_end":73098,"line_start":903,"line_end":903,"column_start":6,"column_end":11},"name":"slice","qualname":"::traits::Slice::slice","value":"fn (&self, range: R) -> Self","parent":{"krate":0,"index":415},"children":[],"decl_id":null,"docs":" slices self according to the range argument\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":73020,"byte_end":73037,"line_start":901,"line_end":901,"column_start":3,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":422},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":75778,"byte_end":75788,"line_start":1010,"line_end":1010,"column_start":11,"column_end":21},"name":"ExtendInto","qualname":"::traits::ExtendInto","value":"ExtendInto","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426}],"decl_id":null,"docs":" abstracts something which can extend an `Extend`\n used to build modified input slices in `escaped_transform`\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":423},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":75921,"byte_end":75925,"line_start":1015,"line_end":1015,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::ExtendInto::Item","value":"type Item;","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" the current input type is a sequence of that `Item` type.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":424},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":75972,"byte_end":75980,"line_start":1018,"line_end":1018,"column_start":8,"column_end":16},"name":"Extender","qualname":"::traits::ExtendInto::Extender","value":"type Extender: Extend<Self::Item>;","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" the type that will be produced\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":76068,"byte_end":76079,"line_start":1022,"line_end":1022,"column_start":6,"column_end":17},"name":"new_builder","qualname":"::traits::ExtendInto::new_builder","value":"fn (&self) -> Self::Extender","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" create a new `Extend` of the correct type\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":76053,"byte_end":76062,"line_start":1021,"line_end":1021,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":76170,"byte_end":76181,"line_start":1025,"line_end":1025,"column_start":6,"column_end":17},"name":"extend_into","qualname":"::traits::ExtendInto::extend_into","value":"fn (&self, acc: &mut Self::Extender) -> ()","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" accumulate the input into an accumulator\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":76155,"byte_end":76164,"line_start":1024,"line_end":1024,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":452},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":77831,"byte_end":77838,"line_start":1110,"line_end":1110,"column_start":11,"column_end":18},"name":"ToUsize","qualname":"::traits::ToUsize","value":"ToUsize","parent":null,"children":[{"krate":0,"index":453}],"decl_id":null,"docs":" Helper trait to convert numbers to usize","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":77875,"byte_end":77883,"line_start":1112,"line_end":1112,"column_start":6,"column_end":14},"name":"to_usize","qualname":"::traits::ToUsize::to_usize","value":"fn (&self) -> usize","parent":{"krate":0,"index":452},"children":[],"decl_id":null,"docs":" converts self to usize\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":464},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":78490,"byte_end":78502,"line_start":1148,"line_end":1148,"column_start":11,"column_end":23},"name":"ErrorConvert","qualname":"::traits::ErrorConvert","value":"ErrorConvert<E>","parent":null,"children":[{"krate":0,"index":466}],"decl_id":null,"docs":" equivalent From implementation to avoid orphan rules in bits parsers\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":78551,"byte_end":78558,"line_start":1150,"line_end":1150,"column_start":6,"column_end":13},"name":"convert","qualname":"::traits::ErrorConvert::convert","value":"fn (self) -> E","parent":{"krate":0,"index":464},"children":[],"decl_id":null,"docs":" transform to another error type\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":473},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"combinator","qualname":"::combinator","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":484},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":535},{"krate":0,"index":542},{"krate":0,"index":552},{"krate":0,"index":560},{"krate":0,"index":569},{"krate":0,"index":576},{"krate":0,"index":585},{"krate":0,"index":592},{"krate":0,"index":602},{"krate":0,"index":609},{"krate":0,"index":614},{"krate":0,"index":621},{"krate":0,"index":626},{"krate":0,"index":633},{"krate":0,"index":638},{"krate":0,"index":645},{"krate":0,"index":650},{"krate":0,"index":657},{"krate":0,"index":666},{"krate":0,"index":673},{"krate":0,"index":682},{"krate":0,"index":688},{"krate":0,"index":695},{"krate":0,"index":700},{"krate":0,"index":707},{"krate":0,"index":712},{"krate":0,"index":719},{"krate":0,"index":724},{"krate":0,"index":729},{"krate":0,"index":736},{"krate":0,"index":741},{"krate":0,"index":749}],"decl_id":null,"docs":" general purpose combinators\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16372,"byte_end":16384,"line_start":484,"line_end":484,"column_start":1,"column_end":13}},{"value":"allow(unused_imports)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":79433,"byte_end":79458,"line_start":3,"line_end":3,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":80221,"byte_end":80225,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"rest","qualname":"::combinator::rest","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Return the remaining input","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":80204,"byte_end":80213,"line_start":30,"line_end":30,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":80716,"byte_end":80724,"line_start":48,"line_end":48,"column_start":8,"column_end":16},"name":"rest_len","qualname":"::combinator::rest_len","value":"fn <T, E> (input: T) -> IResult<T, usize, E>","parent":null,"children":[],"decl_id":null,"docs":" Return the length of the remaining input","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":80699,"byte_end":80708,"line_start":47,"line_end":47,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":81486,"byte_end":81489,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"map","qualname":"::combinator::map","value":"fn <I, O1, O2, E, F, G> (first: F, second: G) -> impl Fn(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" maps a function on the result of a parser","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":81755,"byte_end":81759,"line_start":87,"line_end":87,"column_start":8,"column_end":12},"name":"mapc","qualname":"::combinator::mapc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":82694,"byte_end":82701,"line_start":116,"line_end":116,"column_start":8,"column_end":15},"name":"map_res","qualname":"::combinator::map_res","value":"fn <I, O1, O2, E, E2, F, G> (first: F, second: G) -> impl Fn(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" applies a function returning a Result over the result of a parser","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":83126,"byte_end":83134,"line_start":132,"line_end":132,"column_start":8,"column_end":16},"name":"map_resc","qualname":"::combinator::map_resc","value":"fn <I, O1, O2, E, E2, F, G> (input: I, first: F, second: G) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":84102,"byte_end":84109,"line_start":161,"line_end":161,"column_start":8,"column_end":15},"name":"map_opt","qualname":"::combinator::map_opt","value":"fn <I, O1, O2, E, F, G> (first: F, second: G) -> impl Fn(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" applies a function returning an Option over the result of a parser","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":84526,"byte_end":84534,"line_start":177,"line_end":177,"column_start":8,"column_end":16},"name":"map_optc","qualname":"::combinator::map_optc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":576},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":85268,"byte_end":85278,"line_start":202,"line_end":202,"column_start":8,"column_end":18},"name":"map_parser","qualname":"::combinator::map_parser","value":"fn <I, O1, O2, E, F, G> (first: F, second: G) -> impl Fn(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" applies a parser over the result of another one","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":585},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":85609,"byte_end":85620,"line_start":216,"line_end":216,"column_start":8,"column_end":19},"name":"map_parserc","qualname":"::combinator::map_parserc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":592},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":86422,"byte_end":86430,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::combinator::flat_map","value":"fn <I, O1, O2, E, F, G, H> (first: F, second: G) -> impl Fn(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" creates a new parser from the output of the first parser, then apply that parser over the rest of the input","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":602},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":87173,"byte_end":87176,"line_start":270,"line_end":270,"column_start":8,"column_end":11},"name":"opt","qualname":"::combinator::opt","value":"fn <I, O, E, F> (f: F) -> impl Fn(I) -> IResult<I, Option<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" optional parser: will return None if not successful","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":609},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":87506,"byte_end":87510,"line_start":285,"line_end":285,"column_start":8,"column_end":12},"name":"optc","qualname":"::combinator::optc","value":"fn <I, O, E, F> (input: I, f: F) -> IResult<I, Option<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":614},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":88278,"byte_end":88282,"line_start":311,"line_end":311,"column_start":8,"column_end":12},"name":"cond","qualname":"::combinator::cond","value":"fn <I, O, E, F> (b: bool, f: F) -> impl Fn(I) -> IResult<I, Option<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" calls the parser if the condition is met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":88613,"byte_end":88618,"line_start":328,"line_end":328,"column_start":8,"column_end":13},"name":"condc","qualname":"::combinator::condc","value":"fn <I, O, E, F> (input: I, b: bool, f: F) -> IResult<I, Option<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":89213,"byte_end":89217,"line_start":350,"line_end":350,"column_start":8,"column_end":12},"name":"peek","qualname":"::combinator::peek","value":"fn <I, O, E, F> (f: F) -> impl Fn(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" tries to apply its parser without consuming the input","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":633},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":89490,"byte_end":89495,"line_start":364,"line_end":364,"column_start":8,"column_end":13},"name":"peekc","qualname":"::combinator::peekc","value":"fn <I, O, E, F> (input: I, f: F) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":90058,"byte_end":90066,"line_start":386,"line_end":386,"column_start":8,"column_end":16},"name":"complete","qualname":"::combinator::complete","value":"fn <I, O, E, F> (f: F) -> impl Fn(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" transforms Incomplete into Error","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":90415,"byte_end":90424,"line_start":402,"line_end":402,"column_start":8,"column_end":17},"name":"completec","qualname":"::combinator::completec","value":"fn <I, O, E, F> (input: I, f: F) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":91107,"byte_end":91120,"line_start":425,"line_end":425,"column_start":8,"column_end":21},"name":"all_consuming","qualname":"::combinator::all_consuming","value":"fn <I, O, E, F> (f: F) -> impl Fn(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" succeeds if all the input has been consumed by its child parser","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":92121,"byte_end":92127,"line_start":459,"line_end":459,"column_start":8,"column_end":14},"name":"verify","qualname":"::combinator::verify","value":"fn <I, O1, O2, E, F, G> (first: F, second: G) -> impl Fn(I) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":" returns the result of the child parser if it satisfies a verification function","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":92566,"byte_end":92573,"line_start":479,"line_end":479,"column_start":8,"column_end":15},"name":"verifyc","qualname":"::combinator::verifyc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":93252,"byte_end":93257,"line_start":504,"line_end":504,"column_start":8,"column_end":13},"name":"value","qualname":"::combinator::value","value":"fn <I, O1, O2, E, F> (val: O1, parser: F) -> impl Fn(I) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":" returns the provided value if the child parser succeeds","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":93491,"byte_end":93497,"line_start":514,"line_end":514,"column_start":8,"column_end":14},"name":"valuec","qualname":"::combinator::valuec","value":"fn <I, O1, O2, E, F> (input: I, val: O1, parser: F) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":94085,"byte_end":94088,"line_start":536,"line_end":536,"column_start":8,"column_end":11},"name":"not","qualname":"::combinator::not","value":"fn <I, O, E, F> (parser: F) -> impl Fn(I) -> IResult<I, (), E>","parent":null,"children":[],"decl_id":null,"docs":" succeeds if the child parser returns an error","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":94453,"byte_end":94457,"line_start":551,"line_end":551,"column_start":8,"column_end":12},"name":"notc","qualname":"::combinator::notc","value":"fn <I, O, E, F> (input: I, parser: F) -> IResult<I, (), E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":95161,"byte_end":95170,"line_start":574,"line_end":574,"column_start":8,"column_end":17},"name":"recognize","qualname":"::combinator::recognize","value":"fn <I, O, E, F> (parser: F) -> impl Fn(I) -> IResult<I, I, E>","parent":null,"children":[],"decl_id":null,"docs":" if the child parser was successful, return the consumed input as produced value","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":95558,"byte_end":95568,"line_start":591,"line_end":591,"column_start":8,"column_end":18},"name":"recognizec","qualname":"::combinator::recognizec","value":"fn <I, O, E, F> (input: I, parser: F) -> IResult<I, I, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":712},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":96165,"byte_end":96168,"line_start":613,"line_end":613,"column_start":8,"column_end":11},"name":"cut","qualname":"::combinator::cut","value":"fn <I, O, E, F> (parser: F) -> impl Fn(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" transforms an error to failure","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":96486,"byte_end":96490,"line_start":627,"line_end":627,"column_start":8,"column_end":12},"name":"cutc","qualname":"::combinator::cutc","value":"fn <I, O, E, F> (input: I, parser: F) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":97406,"byte_end":97414,"line_start":652,"line_end":652,"column_start":8,"column_end":16},"name":"iterator","qualname":"::combinator::iterator","value":"fn <Input, Output, Error, F> (input: Input, f: F) -> ParserIterator<Input, Error, F>","parent":null,"children":[],"decl_id":null,"docs":" creates an iterator from input data and a parser","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":729},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":97739,"byte_end":97753,"line_start":665,"line_end":665,"column_start":12,"column_end":26},"name":"ParserIterator","qualname":"::combinator::ParserIterator","value":"ParserIterator {  }","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735}],"decl_id":null,"docs":" main structure associated to the [iterator] function\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":97978,"byte_end":97984,"line_start":673,"line_end":673,"column_start":10,"column_end":16},"name":"finish","qualname":"<ParserIterator<I, E, F>>::finish","value":"fn (self) -> IResult<I, (), E>","parent":null,"children":[],"decl_id":null,"docs":" returns the remaining input if parsing was successful, or the error if we encountered an error\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":761},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/branch/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"branch","qualname":"::branch","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/branch/mod.rs","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":780},{"krate":0,"index":787},{"krate":0,"index":792},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":3483},{"krate":0,"index":3490},{"krate":0,"index":3498},{"krate":0,"index":3507},{"krate":0,"index":3517},{"krate":0,"index":3528},{"krate":0,"index":3540},{"krate":0,"index":3553},{"krate":0,"index":3567},{"krate":0,"index":3582},{"krate":0,"index":3598},{"krate":0,"index":3615},{"krate":0,"index":3633},{"krate":0,"index":3652},{"krate":0,"index":3672},{"krate":0,"index":3693},{"krate":0,"index":3715},{"krate":0,"index":3738},{"krate":0,"index":3762},{"krate":0,"index":3787},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":3813},{"krate":0,"index":3821},{"krate":0,"index":3831},{"krate":0,"index":3843},{"krate":0,"index":3857},{"krate":0,"index":3873},{"krate":0,"index":3891},{"krate":0,"index":3911},{"krate":0,"index":3933},{"krate":0,"index":3957},{"krate":0,"index":3983},{"krate":0,"index":4011},{"krate":0,"index":4041},{"krate":0,"index":4073},{"krate":0,"index":4107},{"krate":0,"index":4143},{"krate":0,"index":4181},{"krate":0,"index":4221},{"krate":0,"index":4263},{"krate":0,"index":4307}],"decl_id":null,"docs":" choice combinators\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16405,"byte_end":16417,"line_start":486,"line_end":486,"column_start":1,"column_end":13}}]},{"kind":"Trait","id":{"krate":0,"index":775},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/branch/mod.rs","byte_start":140199,"byte_end":140202,"line_start":13,"line_end":13,"column_start":11,"column_end":14},"name":"Alt","qualname":"::branch::Alt","value":"Alt<I, O, E>","parent":null,"children":[{"krate":0,"index":779}],"decl_id":null,"docs":" helper trait for the [alt()] combinator","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/branch/mod.rs","byte_start":140310,"byte_end":140316,"line_start":15,"line_end":15,"column_start":6,"column_end":12},"name":"choice","qualname":"::branch::Alt::choice","value":"fn (&self, input: I) -> IResult<I, O, E>","parent":{"krate":0,"index":775},"children":[],"decl_id":null,"docs":" tests each parser in the tuple and returns the result of the first one that succeeds\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":780},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/branch/mod.rs","byte_start":141340,"byte_end":141343,"line_start":45,"line_end":45,"column_start":8,"column_end":11},"name":"alt","qualname":"::branch::alt","value":"fn <I, O, E, List> (l: List) -> impl Fn(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" tests a list of parsers one by one until one succeeds","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":787},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/branch/mod.rs","byte_start":141597,"byte_end":141608,"line_start":52,"line_end":52,"column_start":11,"column_end":22},"name":"Permutation","qualname":"::branch::Permutation","value":"Permutation<I, O, E>","parent":null,"children":[{"krate":0,"index":791}],"decl_id":null,"docs":" helper trait for the [permutation()] combinator","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/branch/mod.rs","byte_start":141715,"byte_end":141726,"line_start":54,"line_end":54,"column_start":6,"column_end":17},"name":"permutation","qualname":"::branch::Permutation::permutation","value":"fn (&self, input: I) -> IResult<I, O, E>","parent":{"krate":0,"index":787},"children":[],"decl_id":null,"docs":" tries to apply all parsers in the tuple in various orders until all of them succeed\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/branch/mod.rs","byte_start":142693,"byte_end":142704,"line_start":83,"line_end":83,"column_start":8,"column_end":19},"name":"permutation","qualname":"::branch::permutation","value":"fn <I, O, E, List> (l: List) -> impl Fn(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" applies a list of parsers in any order","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":806},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sequence","qualname":"::sequence","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":829},{"krate":0,"index":836},{"krate":0,"index":845},{"krate":0,"index":852},{"krate":0,"index":862},{"krate":0,"index":869},{"krate":0,"index":881},{"krate":0,"index":890},{"krate":0,"index":902},{"krate":0,"index":911},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":4353},{"krate":0,"index":4361},{"krate":0,"index":4371},{"krate":0,"index":4383},{"krate":0,"index":4397},{"krate":0,"index":4413},{"krate":0,"index":4431},{"krate":0,"index":4451},{"krate":0,"index":4473},{"krate":0,"index":4497},{"krate":0,"index":4523},{"krate":0,"index":4551},{"krate":0,"index":4581},{"krate":0,"index":4613},{"krate":0,"index":4647},{"krate":0,"index":4683},{"krate":0,"index":4721},{"krate":0,"index":4761},{"krate":0,"index":4803},{"krate":0,"index":4847},{"krate":0,"index":919}],"decl_id":null,"docs":" combinators applying parsers in sequence\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16434,"byte_end":16446,"line_start":488,"line_end":488,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":819},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":179163,"byte_end":179167,"line_start":28,"line_end":28,"column_start":8,"column_end":12},"name":"pair","qualname":"::sequence::pair","value":"fn <I, O1, O2, E, F, G> (first: F, second: G) -> impl Fn(I) -> IResult<I, (O1, O2), E>","parent":null,"children":[],"decl_id":null,"docs":" Gets an object from the first parser,\n then gets another object from the second parser.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":829},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":179539,"byte_end":179544,"line_start":41,"line_end":41,"column_start":8,"column_end":13},"name":"pairc","qualname":"::sequence::pairc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, (O1, O2), E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":836},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":180434,"byte_end":180442,"line_start":68,"line_end":68,"column_start":8,"column_end":16},"name":"preceded","qualname":"::sequence::preceded","value":"fn <I, O1, O2, E, F, G> (first: F, second: G) -> impl Fn(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" Matches an object from the first parser and discards it,\n then gets an object from the second parser.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":845},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":180778,"byte_end":180787,"line_start":81,"line_end":81,"column_start":8,"column_end":17},"name":"precededc","qualname":"::sequence::precededc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":852},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":181691,"byte_end":181701,"line_start":108,"line_end":108,"column_start":8,"column_end":18},"name":"terminated","qualname":"::sequence::terminated","value":"fn <I, O1, O2, E, F, G> (first: F, second: G) -> impl Fn(I) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets an object from the first parser,\n then matches an object from the second parser and discards it.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":862},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":182060,"byte_end":182071,"line_start":121,"line_end":121,"column_start":8,"column_end":19},"name":"terminatedc","qualname":"::sequence::terminatedc","value":"fn <I, O1, O2, E, F, G> (input: I, first: F, second: G) -> IResult<I, O1, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":869},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":183098,"byte_end":183112,"line_start":150,"line_end":150,"column_start":8,"column_end":22},"name":"separated_pair","qualname":"::sequence::separated_pair","value":"fn <I, O1, O2, O3, E, F, G, H> (first: F, sep: G, second: H) -> impl Fn(I) -> IResult<I, (O1, O3), E>","parent":null,"children":[],"decl_id":null,"docs":" Gets an object from the first parser,\n then matches an object from the sep_parser and discards it,\n then gets another object from the second parser.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":881},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":183566,"byte_end":183581,"line_start":165,"line_end":165,"column_start":8,"column_end":23},"name":"separated_pairc","qualname":"::sequence::separated_pairc","value":"fn <I, O1, O2, O3, E, F, G, H> (input: I, first: F, sep: G, second: H) -> IResult<I, (O1, O3), E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":890},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":184626,"byte_end":184635,"line_start":195,"line_end":195,"column_start":8,"column_end":17},"name":"delimited","qualname":"::sequence::delimited","value":"fn <I, O1, O2, O3, E, F, G, H> (first: F, sep: G, second: H) -> impl Fn(I) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":" Matches an object from the first parser,\n then gets an object from the sep_parser,\n then matches another object from the second parser.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":902},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":185076,"byte_end":185086,"line_start":210,"line_end":210,"column_start":8,"column_end":18},"name":"delimitedc","qualname":"::sequence::delimitedc","value":"fn <I, O1, O2, O3, E, F, G, H> (input: I, first: F, sep: G, second: H) -> IResult<I, O2, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":911},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":185467,"byte_end":185472,"line_start":222,"line_end":222,"column_start":11,"column_end":16},"name":"Tuple","qualname":"::sequence::Tuple","value":"Tuple<I, O, E>","parent":null,"children":[{"krate":0,"index":915}],"decl_id":null,"docs":" helper trait for the tuple combinator","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":185556,"byte_end":185561,"line_start":224,"line_end":224,"column_start":6,"column_end":11},"name":"parse","qualname":"::sequence::Tuple::parse","value":"fn (&self, input: I) -> IResult<I, O, E>","parent":{"krate":0,"index":911},"children":[],"decl_id":null,"docs":" parses the input and returns a tuple of results of each parser\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":919},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/sequence/mod.rs","byte_start":187776,"byte_end":187781,"line_start":288,"line_end":288,"column_start":8,"column_end":13},"name":"tuple","qualname":"::sequence::tuple","value":"fn <I, O, E, List> (l: List) -> impl Fn(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" applies a tuple of parsers one by one and returns their results as a tuple","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":926},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"multi","qualname":"::multi","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":943},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":961},{"krate":0,"index":966},{"krate":0,"index":973},{"krate":0,"index":978},{"krate":0,"index":987},{"krate":0,"index":994},{"krate":0,"index":1003},{"krate":0,"index":1010},{"krate":0,"index":1019},{"krate":0,"index":1026},{"krate":0,"index":1033},{"krate":0,"index":1038},{"krate":0,"index":1045},{"krate":0,"index":1050},{"krate":0,"index":1057},{"krate":0,"index":1062},{"krate":0,"index":1069},{"krate":0,"index":1078},{"krate":0,"index":1085},{"krate":0,"index":1094},{"krate":0,"index":1101},{"krate":0,"index":1110},{"krate":0,"index":1117},{"krate":0,"index":1124},{"krate":0,"index":1133}],"decl_id":null,"docs":" combinators applying their child parser multiple times\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16465,"byte_end":16477,"line_start":490,"line_end":490,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":954},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":215751,"byte_end":215756,"line_start":38,"line_end":38,"column_start":8,"column_end":13},"name":"many0","qualname":"::multi::many0","value":"fn <I, O, E, F> (f: F) -> impl Fn(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Repeats the embedded parser until it fails\n and returns the results in a `Vec`.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":215718,"byte_end":215743,"line_start":37,"line_end":37,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":961},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":216450,"byte_end":216456,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"many0c","qualname":"::multi::many0c","value":"fn <I, O, E, F> (input: I, f: F) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":216417,"byte_end":216442,"line_start":65,"line_end":65,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":966},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":217540,"byte_end":217545,"line_start":102,"line_end":102,"column_start":8,"column_end":13},"name":"many1","qualname":"::multi::many1","value":"fn <I, O, E, F> (f: F) -> impl Fn(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Runs the embedded parser until it fails and\n returns the results in a `Vec`. Fails if\n the embedded parser does not produce at least\n one result.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":217507,"byte_end":217532,"line_start":101,"line_end":101,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":973},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":218518,"byte_end":218524,"line_start":140,"line_end":140,"column_start":8,"column_end":14},"name":"many1c","qualname":"::multi::many1c","value":"fn <I, O, E, F> (input: I, f: F) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":218485,"byte_end":218510,"line_start":139,"line_end":139,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":978},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":219524,"byte_end":219533,"line_start":168,"line_end":168,"column_start":8,"column_end":17},"name":"many_till","qualname":"::multi::many_till","value":"fn <I, O, P, E, F, G> (f: F, g: G) -> impl Fn(I) -> IResult<I, (Vec<O>, P), E>","parent":null,"children":[],"decl_id":null,"docs":" Applies the parser `f` until the parser `g` produces\n a result. Returns a pair consisting of the results of\n `f` in a `Vec` and the result of `g`.\n ```rust\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::many_till;\n use nom::bytes::complete::tag;","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":219491,"byte_end":219516,"line_start":167,"line_end":167,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":987},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":220608,"byte_end":220618,"line_start":206,"line_end":206,"column_start":8,"column_end":18},"name":"many_tillc","qualname":"::multi::many_tillc","value":"fn <I, O, P, E, F, G> (i: I, f: F, g: G) -> IResult<I, (Vec<O>, P), E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":220575,"byte_end":220600,"line_start":205,"line_end":205,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":994},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":221618,"byte_end":221632,"line_start":238,"line_end":238,"column_start":8,"column_end":22},"name":"separated_list","qualname":"::multi::separated_list","value":"fn <I, O, O2, E, F, G> (sep: G, f: F) -> impl Fn(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Alternates between two parsers to produce\n a list of elements.\n # Arguments\n * `sep` Parses the separator between list elements.\n * `f` Parses the elements of the list.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":221585,"byte_end":221610,"line_start":237,"line_end":237,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1003},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":222971,"byte_end":222986,"line_start":292,"line_end":292,"column_start":8,"column_end":23},"name":"separated_listc","qualname":"::multi::separated_listc","value":"fn <I, O, O2, E, F, G> (i: I, sep: G, f: F) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":222938,"byte_end":222963,"line_start":291,"line_end":291,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1010},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":224156,"byte_end":224179,"line_start":325,"line_end":325,"column_start":8,"column_end":31},"name":"separated_nonempty_list","qualname":"::multi::separated_nonempty_list","value":"fn <I, O, O2, E, F, G> (sep: G, f: F) -> impl Fn(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Alternates between two parsers to produce\n a list of elements. Fails if the element\n parser does not produce at least one element.\n # Arguments\n * `sep` Parses the separator between list elements.\n * `f` Parses the elements of the list.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::separated_nonempty_list;\n use nom::bytes::complete::tag;","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":224123,"byte_end":224148,"line_start":324,"line_end":324,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":225501,"byte_end":225525,"line_start":379,"line_end":379,"column_start":8,"column_end":32},"name":"separated_nonempty_listc","qualname":"::multi::separated_nonempty_listc","value":"fn <I, O, O2, E, F, G> (i: I, sep: G, f: F) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":225468,"byte_end":225493,"line_start":378,"line_end":378,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1026},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":226665,"byte_end":226673,"line_start":413,"line_end":413,"column_start":8,"column_end":16},"name":"many_m_n","qualname":"::multi::many_m_n","value":"fn <I, O, E, F> (m: usize, n: usize, f: F) -> impl Fn(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Repeats the embedded parser `n` times or until it fails\n and returns the results in a `Vec`. Fails if the\n embedded parser does not succeed at least `m` times.\n # Arguments\n * `m` The minimum number of iterations.\n * `n` The maximum number of iterations.\n * `f` The parser to apply.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::many_m_n;\n use nom::bytes::complete::tag;","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":226632,"byte_end":226657,"line_start":412,"line_end":412,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1033},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":227874,"byte_end":227883,"line_start":463,"line_end":463,"column_start":8,"column_end":17},"name":"many_m_nc","qualname":"::multi::many_m_nc","value":"fn <I, O, E, F> (i: I, m: usize, n: usize, f: F) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":227841,"byte_end":227866,"line_start":462,"line_end":462,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1038},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":228686,"byte_end":228697,"line_start":491,"line_end":491,"column_start":8,"column_end":19},"name":"many0_count","qualname":"::multi::many0_count","value":"fn <I, O, E, F> (f: F) -> impl Fn(I) -> IResult<I, usize, E>","parent":null,"children":[],"decl_id":null,"docs":" Repeats the embedded parser until it fails\n and returns the number of successful iterations.\n # Arguments\n * `f` The parser to apply.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::many0_count;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":229386,"byte_end":229398,"line_start":523,"line_end":523,"column_start":8,"column_end":20},"name":"many0_countc","qualname":"::multi::many0_countc","value":"fn <I, O, E, F> (i: I, f: F) -> IResult<I, usize, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1050},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":230312,"byte_end":230323,"line_start":553,"line_end":553,"column_start":8,"column_end":19},"name":"many1_count","qualname":"::multi::many1_count","value":"fn <I, O, E, F> (f: F) -> impl Fn(I) -> IResult<I, usize, E>","parent":null,"children":[],"decl_id":null,"docs":" Repeats the embedded parser until it fails\n and returns the number of successful iterations.\n Fails if the embedded parser does not succeed\n at least once.\n # Arguments\n * `f` The parser to apply.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::many1_count;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1057},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":231186,"byte_end":231198,"line_start":589,"line_end":589,"column_start":8,"column_end":20},"name":"many1_countc","qualname":"::multi::many1_countc","value":"fn <I, O, E, F> (i: I, f: F) -> IResult<I, usize, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1062},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":232202,"byte_end":232207,"line_start":620,"line_end":620,"column_start":8,"column_end":13},"name":"count","qualname":"::multi::count","value":"fn <I, O, E, F> (f: F, count: usize) -> impl Fn(I) -> IResult<I, Vec<O>, E>","parent":null,"children":[],"decl_id":null,"docs":" Runs the embedded parser a specified number\n of times. Returns the results in a `Vec`.\n # Arguments\n * `f` The parser to apply.\n * `count` How often to apply the parser.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::count;\n use nom::bytes::complete::tag;","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":232169,"byte_end":232194,"line_start":619,"line_end":619,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1069},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":233751,"byte_end":233761,"line_start":679,"line_end":679,"column_start":8,"column_end":18},"name":"fold_many0","qualname":"::multi::fold_many0","value":"fn <I, O, E, F, G, R> (f: F, init: R, g: G) -> impl Fn(I) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":" Applies a parser until it fails and accumulates\n the results using a given function and initial value.\n # Arguments\n * `f` The parser to apply.\n * `init` The initial value.\n * `g` The function that combines a result of `f` with\n       the current accumulator.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::fold_many0;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1078},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":234539,"byte_end":234550,"line_start":715,"line_end":715,"column_start":8,"column_end":19},"name":"fold_many0c","qualname":"::multi::fold_many0c","value":"fn <I, O, E, F, G, R> (i: I, f: F, init: R, g: G) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1085},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":235796,"byte_end":235806,"line_start":757,"line_end":757,"column_start":8,"column_end":18},"name":"fold_many1","qualname":"::multi::fold_many1","value":"fn <I, O, E, F, G, R> (f: F, init: R, g: G) -> impl Fn(I) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":" Applies a parser until it fails and accumulates\n the results using a given function and initial value.\n Fails if the embedded parser does not succeed at least\n once.\n # Arguments\n * `f` The parser to apply.\n * `init` The initial value.\n * `g` The function that combines a result of `f` with\n       the current accumulator.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::fold_many1;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1094},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":236796,"byte_end":236807,"line_start":800,"line_end":800,"column_start":8,"column_end":19},"name":"fold_many1c","qualname":"::multi::fold_many1c","value":"fn <I, O, E, F, G, R> (i: I, f: F, init: R, g: G) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1101},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":238211,"byte_end":238224,"line_start":847,"line_end":847,"column_start":8,"column_end":21},"name":"fold_many_m_n","qualname":"::multi::fold_many_m_n","value":"fn <I, O, E, F, G, R> (m: usize, n: usize, f: F, init: R, g: G) -> impl Fn(I) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":" Applies a parser `n` times or until it fails and accumulates\n the results using a given function and initial value.\n Fails if the embedded parser does not succeed at least `m`\n times.\n # Arguments\n * `m` The minimum number of iterations.\n * `n` The maximum number of iterations.\n * `f` The parser to apply.\n * `init` The initial value.\n * `g` The function that combines a result of `f` with\n       the current accumulator.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n use nom::multi::fold_many_m_n;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1110},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":239189,"byte_end":239203,"line_start":885,"line_end":885,"column_start":8,"column_end":22},"name":"fold_many_m_nc","qualname":"::multi::fold_many_m_nc","value":"fn <I, O, E, F, G, R> (i: I, m: usize, n: usize, f: F, init: R, g: G) -> IResult<I, R, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1117},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":240212,"byte_end":240223,"line_start":918,"line_end":918,"column_start":8,"column_end":19},"name":"length_data","qualname":"::multi::length_data","value":"fn <I, N, E, F> (f: F) -> impl Fn(I) -> IResult<I, I, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets a number from the first parser,\n takes a subslice of the input of that size,\n then applies the second parser on that subslice.\n If the second parser returns Incomplete,\n length_value will return an error.\n # Arguments\n * `f` The parser to apply.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n # use nom::Needed::Size;\n use nom::number::complete::be_u16;\n use nom::multi::length_data;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1124},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":241495,"byte_end":241507,"line_start":961,"line_end":961,"column_start":8,"column_end":20},"name":"length_value","qualname":"::multi::length_value","value":"fn <I, O, N, E, F, G> (f: F, g: G) -> impl Fn(I) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets a number from the first parser,\n takes a subslice of the input of that size,\n then applies the second parser on that subslice.\n If the second parser returns Incomplete,\n length_value will return an error.\n # Arguments\n * `f` The parser to apply.\n ```rust\n # #[macro_use] extern crate nom;\n # use nom::{Err, error::ErrorKind, Needed, IResult};\n # use nom::Needed::Size;\n use nom::number::complete::be_u16;\n use nom::multi::length_value;\n use nom::bytes::complete::tag;","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1133},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/multi/mod.rs","byte_start":242189,"byte_end":242202,"line_start":989,"line_end":989,"column_start":8,"column_end":21},"name":"length_valuec","qualname":"::multi::length_valuec","value":"fn <I, O, N, E, F, G> (i: I, f: F, g: G) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1140},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/methods.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"methods","qualname":"::methods","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/methods.rs","parent":null,"children":[{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143}],"decl_id":null,"docs":" method combinators\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16493,"byte_end":16505,"line_start":492,"line_end":492,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1144},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bytes","qualname":"::bytes","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/mod.rs","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1161},{"krate":0,"index":1293}],"decl_id":null,"docs":" parsers recognizing bytes streams\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16524,"byte_end":16536,"line_start":495,"line_end":495,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1161},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"streaming","qualname":"::bytes::streaming","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1181},{"krate":0,"index":1188},{"krate":0,"index":1194},{"krate":0,"index":1201},{"krate":0,"index":1208},{"krate":0,"index":1215},{"krate":0,"index":1222},{"krate":0,"index":1229},{"krate":0,"index":1236},{"krate":0,"index":1243},{"krate":0,"index":1249},{"krate":0,"index":1255},{"krate":0,"index":1265},{"krate":0,"index":1272},{"krate":0,"index":1284}],"decl_id":null,"docs":" parsers recognizing bytes streams, streaming version\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":306550,"byte_end":306553,"line_start":28,"line_end":28,"column_start":8,"column_end":11},"name":"tag","qualname":"::bytes::streaming::tag","value":"fn <'a, T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1188},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":307991,"byte_end":308002,"line_start":69,"line_end":69,"column_start":8,"column_end":19},"name":"tag_no_case","qualname":"::bytes::streaming::tag_no_case","value":"fn <T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a case insensitive pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1194},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":309448,"byte_end":309454,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"is_not","qualname":"::bytes::streaming::is_not","value":"fn <T, Input, Error> (arr: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Parse till certain characters are met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1201},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":310746,"byte_end":310750,"line_start":147,"line_end":147,"column_start":8,"column_end":12},"name":"is_a","qualname":"::bytes::streaming::is_a","value":"fn <T, Input, Error> (arr: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest slice of the matches the pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1208},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":312017,"byte_end":312027,"line_start":181,"line_end":181,"column_start":8,"column_end":18},"name":"take_while","qualname":"::bytes::streaming::take_while","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice (if any) that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1215},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":313289,"byte_end":313300,"line_start":214,"line_end":214,"column_start":8,"column_end":19},"name":"take_while1","qualname":"::bytes::streaming::take_while1","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (atleast 1) input slice that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1222},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":314819,"byte_end":314833,"line_start":251,"line_end":251,"column_start":8,"column_end":22},"name":"take_while_m_n","qualname":"::bytes::streaming::take_while_m_n","value":"fn <F, Input, Error> (m: usize, n: usize, cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (m <= len <= n) input slice  that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1229},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":317188,"byte_end":317197,"line_start":320,"line_end":320,"column_start":8,"column_end":17},"name":"take_till","qualname":"::bytes::streaming::take_till","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice (if any) till a predicate is met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1236},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":318409,"byte_end":318419,"line_start":351,"line_end":351,"column_start":8,"column_end":18},"name":"take_till1","qualname":"::bytes::streaming::take_till1","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (atleast 1) input slice till a predicate is met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1243},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":319494,"byte_end":319498,"line_start":382,"line_end":382,"column_start":8,"column_end":12},"name":"take","qualname":"::bytes::streaming::take","value":"fn <C, Input, Error> (count: C) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns an input slice containing the first N input elements (Input[..N])","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1249},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":320614,"byte_end":320624,"line_start":415,"line_end":415,"column_start":8,"column_end":18},"name":"take_until","qualname":"::bytes::streaming::take_until","value":"fn <T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice till it matches the pattern.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1255},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":321824,"byte_end":321831,"line_start":454,"line_end":454,"column_start":8,"column_end":15},"name":"escaped","qualname":"::bytes::streaming::escaped","value":"fn <Input, Error, F, G, O1, O2> (normal: F, control_char: char, escapable: G) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a byte string with escaped characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1265},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":323560,"byte_end":323568,"line_start":510,"line_end":510,"column_start":8,"column_end":16},"name":"escapedc","qualname":"::bytes::streaming::escapedc","value":"fn <Input, Error, F, G, O1, O2> (i: Input, normal: F, control_char: char, escapable: G) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1272},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":325109,"byte_end":325126,"line_start":551,"line_end":551,"column_start":8,"column_end":25},"name":"escaped_transform","qualname":"::bytes::streaming::escaped_transform","value":"fn <Input, Error, F, G, O1, O2, ExtendItem, Output> (normal: F, control_char: char, transform: G) -> impl Fn(Input) -> IResult<Input, Output, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a byte string with escaped characters.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":325076,"byte_end":325101,"line_start":550,"line_end":550,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1284},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":327558,"byte_end":327576,"line_start":622,"line_end":622,"column_start":8,"column_end":26},"name":"escaped_transformc","qualname":"::bytes::streaming::escaped_transformc","value":"fn <Input, Error, F, G, O1, O2, ExtendItem, Output> (i: Input, normal: F, control_char: char, transform: G) -> IResult<Input, Output, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/streaming.rs","byte_start":327525,"byte_end":327550,"line_start":621,"line_end":621,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":1293},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"complete","qualname":"::bytes::complete","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","parent":null,"children":[{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1312},{"krate":0,"index":1319},{"krate":0,"index":1325},{"krate":0,"index":1332},{"krate":0,"index":1339},{"krate":0,"index":1346},{"krate":0,"index":1353},{"krate":0,"index":1360},{"krate":0,"index":1367},{"krate":0,"index":1374},{"krate":0,"index":1380},{"krate":0,"index":1386},{"krate":0,"index":1396},{"krate":0,"index":1403},{"krate":0,"index":1415}],"decl_id":null,"docs":" parsers recognizing bytes streams, complete input version\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1312},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":329642,"byte_end":329645,"line_start":30,"line_end":30,"column_start":8,"column_end":11},"name":"tag","qualname":"::bytes::complete::tag","value":"fn <'a, T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1319},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":331083,"byte_end":331094,"line_start":71,"line_end":71,"column_start":8,"column_end":19},"name":"tag_no_case","qualname":"::bytes::complete::tag_no_case","value":"fn <T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a case insensitive pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1325},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":332426,"byte_end":332432,"line_start":113,"line_end":113,"column_start":8,"column_end":14},"name":"is_not","qualname":"::bytes::complete::is_not","value":"fn <T, Input, Error> (arr: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Parse till certain characters are met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1332},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":333629,"byte_end":333633,"line_start":147,"line_end":147,"column_start":8,"column_end":12},"name":"is_a","qualname":"::bytes::complete::is_a","value":"fn <T, Input, Error> (arr: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest slice of the matches the pattern","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1339},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":334745,"byte_end":334755,"line_start":179,"line_end":179,"column_start":8,"column_end":18},"name":"take_while","qualname":"::bytes::complete::take_while","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice (if any) that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1346},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":335867,"byte_end":335878,"line_start":209,"line_end":209,"column_start":8,"column_end":19},"name":"take_while1","qualname":"::bytes::complete::take_while1","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (atleast 1) input slice that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1353},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":337292,"byte_end":337306,"line_start":245,"line_end":245,"column_start":8,"column_end":22},"name":"take_while_m_n","qualname":"::bytes::complete::take_while_m_n","value":"fn <F, Input, Error> (m: usize, n: usize, cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (m <= len <= n) input slice  that matches the predicate","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1360},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":339600,"byte_end":339609,"line_start":315,"line_end":315,"column_start":8,"column_end":17},"name":"take_till","qualname":"::bytes::complete::take_till","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice (if any) till a predicate is met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1367},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":340784,"byte_end":340794,"line_start":346,"line_end":346,"column_start":8,"column_end":18},"name":"take_till1","qualname":"::bytes::complete::take_till1","value":"fn <F, Input, Error> (cond: F) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest (atleast 1) input slice till a predicate is met","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1374},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":341795,"byte_end":341799,"line_start":376,"line_end":376,"column_start":8,"column_end":12},"name":"take","qualname":"::bytes::complete::take","value":"fn <C, Input, Error> (count: C) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns an input slice containing the first N input elements (Input[..N])","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1380},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":342863,"byte_end":342873,"line_start":407,"line_end":407,"column_start":8,"column_end":18},"name":"take_until","qualname":"::bytes::complete::take_until","value":"fn <T, Input, Error> (tag: T) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest input slice till it matches the pattern.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1386},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":344067,"byte_end":344074,"line_start":444,"line_end":444,"column_start":8,"column_end":15},"name":"escaped","qualname":"::bytes::complete::escaped","value":"fn <Input, Error, F, G, O1, O2> (normal: F, control_char: char, escapable: G) -> impl Fn(Input) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a byte string with escaped characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1396},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":345987,"byte_end":345995,"line_start":503,"line_end":503,"column_start":8,"column_end":16},"name":"escapedc","qualname":"::bytes::complete::escapedc","value":"fn <Input, Error, F, G, O1, O2> (i: Input, normal: F, control_char: char, escapable: G) -> IResult<Input, Input, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1403},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":347530,"byte_end":347547,"line_start":544,"line_end":544,"column_start":8,"column_end":25},"name":"escaped_transform","qualname":"::bytes::complete::escaped_transform","value":"fn <Input, Error, F, G, O1, O2, ExtendItem, Output> (normal: F, control_char: char, transform: G) -> impl Fn(Input) -> IResult<Input, Output, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a byte string with escaped characters.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":347497,"byte_end":347522,"line_start":543,"line_end":543,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1415},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":350155,"byte_end":350173,"line_start":618,"line_end":618,"column_start":8,"column_end":26},"name":"escaped_transformc","qualname":"::bytes::complete::escaped_transformc","value":"fn <Input, Error, F, G, O1, O2, ExtendItem, Output> (i: Input, normal: F, control_char: char, transform: G) -> IResult<Input, Output, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/complete.rs","byte_start":350122,"byte_end":350147,"line_start":617,"line_end":617,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":1424},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bits","qualname":"::bits","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/mod.rs","parent":null,"children":[{"krate":0,"index":1425},{"krate":0,"index":1430},{"krate":0,"index":1464},{"krate":0,"index":1497},{"krate":0,"index":1500},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1508},{"krate":0,"index":1517},{"krate":0,"index":1523},{"krate":0,"index":1531}],"decl_id":null,"docs":" bit level parsers","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16552,"byte_end":16564,"line_start":497,"line_end":497,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1430},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/streaming.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"streaming","qualname":"::bits::streaming","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/streaming.rs","parent":null,"children":[{"krate":0,"index":1431},{"krate":0,"index":1434},{"krate":0,"index":1438},{"krate":0,"index":1444},{"krate":0,"index":1449},{"krate":0,"index":1456}],"decl_id":null,"docs":" bit level parsers","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1449},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/streaming.rs","byte_start":363317,"byte_end":363321,"line_start":10,"line_end":10,"column_start":8,"column_end":12},"name":"take","qualname":"::bits::streaming::take","value":"fn <I, O, C, E> (count: C) -> impl Fn((I, usize)) -> IResult<(I, usize), O, E>","parent":null,"children":[],"decl_id":null,"docs":" generates a parser taking `count` bits\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1456},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/streaming.rs","byte_start":364833,"byte_end":364836,"line_start":57,"line_end":57,"column_start":8,"column_end":11},"name":"tag","qualname":"::bits::streaming::tag","value":"fn <I, O, C, E> (pattern: O, count: C) -> impl Fn((I, usize)) -> IResult<(I, usize), O, E>","parent":null,"children":[],"decl_id":null,"docs":" generates a parser taking `count` bits and comparing them to `pattern`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1464},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/complete.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"complete","qualname":"::bits::complete","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/complete.rs","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1468},{"krate":0,"index":1471},{"krate":0,"index":1477},{"krate":0,"index":1482},{"krate":0,"index":1489}],"decl_id":null,"docs":" bit level parsers","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1482},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/complete.rs","byte_start":365697,"byte_end":365701,"line_start":10,"line_end":10,"column_start":8,"column_end":12},"name":"take","qualname":"::bits::complete::take","value":"fn <I, O, C, E> (count: C) -> impl Fn((I, usize)) -> IResult<(I, usize), O, E>","parent":null,"children":[],"decl_id":null,"docs":" generates a parser taking `count` bits\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1489},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/complete.rs","byte_start":367235,"byte_end":367238,"line_start":57,"line_end":57,"column_start":8,"column_end":11},"name":"tag","qualname":"::bits::complete::tag","value":"fn <I, O, C, E> (pattern: O, count: C) -> impl Fn((I, usize)) -> IResult<(I, usize), O, E>","parent":null,"children":[],"decl_id":null,"docs":" generates a parser taking `count` bits and comparing them to `pattern`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1508},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/mod.rs","byte_start":352009,"byte_end":352013,"line_start":37,"line_end":37,"column_start":8,"column_end":12},"name":"bits","qualname":"::bits::bits","value":"fn <I, O, E1, E2, P> (parser: P) -> impl Fn(I) -> IResult<I, O, E2>","parent":null,"children":[],"decl_id":null,"docs":" Converts a byte-level input to a bit-level input, for consumption by a parser that uses bits.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1517},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/mod.rs","byte_start":352643,"byte_end":352648,"line_start":54,"line_end":54,"column_start":8,"column_end":13},"name":"bitsc","qualname":"::bits::bitsc","value":"fn <I, O, E1, E2, P> (input: I, parser: P) -> IResult<I, O, E2>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1523},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/mod.rs","byte_start":353702,"byte_end":353707,"line_start":87,"line_end":87,"column_start":8,"column_end":13},"name":"bytes","qualname":"::bits::bytes","value":"fn <I, O, E1, E2, P> (parser: P) -> impl Fn((I, usize)) -> IResult<(I, usize), O, E2>","parent":null,"children":[],"decl_id":null,"docs":" Counterpart to bits, bytes transforms its bit stream input into a byte slice for the underlying\n parser, allowing byte-slice parsers to work on bit streams.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1531},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/mod.rs","byte_start":354659,"byte_end":354665,"line_start":113,"line_end":113,"column_start":8,"column_end":14},"name":"bytesc","qualname":"::bits::bytesc","value":"fn <I, O, E1, E2, P> (input: (I, usize), parser: P) -> IResult<(I, usize), O, E2>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1537},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"character","qualname":"::character","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","parent":null,"children":[{"krate":0,"index":1538},{"krate":0,"index":1542},{"krate":0,"index":1658},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778}],"decl_id":null,"docs":" character specific parsers and combinators","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16580,"byte_end":16592,"line_start":500,"line_end":500,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1542},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"streaming","qualname":"::character::streaming","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","parent":null,"children":[{"krate":0,"index":1543},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1552},{"krate":0,"index":1559},{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1569},{"krate":0,"index":1576},{"krate":0,"index":1583},{"krate":0,"index":1586},{"krate":0,"index":1590},{"krate":0,"index":1593},{"krate":0,"index":1596},{"krate":0,"index":1599},{"krate":0,"index":1602},{"krate":0,"index":1606},{"krate":0,"index":1610},{"krate":0,"index":1614},{"krate":0,"index":1618},{"krate":0,"index":1622},{"krate":0,"index":1626},{"krate":0,"index":1630},{"krate":0,"index":1634},{"krate":0,"index":1638},{"krate":0,"index":1642},{"krate":0,"index":1646},{"krate":0,"index":1650},{"krate":0,"index":1654}],"decl_id":null,"docs":" character specific parsers and combinators, streaming version","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1563},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":374019,"byte_end":374023,"line_start":28,"line_end":28,"column_start":8,"column_end":12},"name":"char","qualname":"::character::streaming::char","value":"fn <I, Error> (c: char) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one character.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1569},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":375077,"byte_end":375083,"line_start":60,"line_end":60,"column_start":8,"column_end":14},"name":"one_of","qualname":"::character::streaming::one_of","value":"fn <I, T, Error> (list: T) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one of the provided characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1576},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":376195,"byte_end":376202,"line_start":88,"line_end":88,"column_start":8,"column_end":15},"name":"none_of","qualname":"::character::streaming::none_of","value":"fn <I, T, Error> (list: T) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a character that is not in the provided characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1583},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":377271,"byte_end":377275,"line_start":116,"line_end":116,"column_start":8,"column_end":12},"name":"crlf","qualname":"::character::streaming::crlf","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes the string \"\\r\\n\".","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1586},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":378430,"byte_end":378445,"line_start":148,"line_end":148,"column_start":8,"column_end":23},"name":"not_line_ending","qualname":"::character::streaming::not_line_ending","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a string of any char except '\\r' or '\\n'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1590},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":380196,"byte_end":380207,"line_start":200,"line_end":200,"column_start":8,"column_end":19},"name":"line_ending","qualname":"::character::streaming::line_ending","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an end of line (both '\\n' and '\\r\\n').","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1593},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":381519,"byte_end":381526,"line_start":235,"line_end":235,"column_start":8,"column_end":15},"name":"newline","qualname":"::character::streaming::newline","value":"fn <I, Error> (input: I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a newline character '\\\\n'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1596},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":382253,"byte_end":382256,"line_start":258,"line_end":258,"column_start":8,"column_end":11},"name":"tab","qualname":"::character::streaming::tab","value":"fn <I, Error> (input: I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a tab character '\\t'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1599},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":382986,"byte_end":382993,"line_start":280,"line_end":280,"column_start":8,"column_end":15},"name":"anychar","qualname":"::character::streaming::anychar","value":"fn <T, E> (input: T) -> IResult<T, char, E>","parent":null,"children":[],"decl_id":null,"docs":" Matches one byte as a character. Note that the input type will\n accept a `str`, but not a `&[u8]`, unlike many other nom parsers.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1602},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":384101,"byte_end":384107,"line_start":311,"line_end":311,"column_start":8,"column_end":14},"name":"alpha0","qualname":"::character::streaming::alpha0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more lowercase and uppercase ASCII alphabetic characters: a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1606},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":384982,"byte_end":384988,"line_start":335,"line_end":335,"column_start":8,"column_end":14},"name":"alpha1","qualname":"::character::streaming::alpha1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more lowercase and uppercase ASCII alphabetic characters: a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1610},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":385823,"byte_end":385829,"line_start":359,"line_end":359,"column_start":8,"column_end":14},"name":"digit0","qualname":"::character::streaming::digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII numerical characters: 0-9","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1614},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":386671,"byte_end":386677,"line_start":383,"line_end":383,"column_start":8,"column_end":14},"name":"digit1","qualname":"::character::streaming::digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII numerical characters: 0-9","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1618},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":387568,"byte_end":387578,"line_start":407,"line_end":407,"column_start":8,"column_end":18},"name":"hex_digit0","qualname":"::character::streaming::hex_digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII hexadecimal numerical characters: 0-9, A-F, a-f","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1622},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":388475,"byte_end":388485,"line_start":431,"line_end":431,"column_start":8,"column_end":18},"name":"hex_digit1","qualname":"::character::streaming::hex_digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII hexadecimal numerical characters: 0-9, A-F, a-f","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1626},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":389341,"byte_end":389351,"line_start":455,"line_end":455,"column_start":8,"column_end":18},"name":"oct_digit0","qualname":"::character::streaming::oct_digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more octal characters: 0-7","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1630},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":390210,"byte_end":390220,"line_start":479,"line_end":479,"column_start":8,"column_end":18},"name":"oct_digit1","qualname":"::character::streaming::oct_digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more octal characters: 0-7","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1634},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":391132,"byte_end":391145,"line_start":503,"line_end":503,"column_start":8,"column_end":21},"name":"alphanumeric0","qualname":"::character::streaming::alphanumeric0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII numerical and alphabetic characters: 0-9, a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1638},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":392063,"byte_end":392076,"line_start":527,"line_end":527,"column_start":8,"column_end":21},"name":"alphanumeric1","qualname":"::character::streaming::alphanumeric1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII numerical and alphabetic characters: 0-9, a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1642},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":392912,"byte_end":392918,"line_start":551,"line_end":551,"column_start":8,"column_end":14},"name":"space0","qualname":"::character::streaming::space0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces and tabs.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1646},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":393808,"byte_end":393814,"line_start":577,"line_end":577,"column_start":8,"column_end":14},"name":"space1","qualname":"::character::streaming::space1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces and tabs.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1650},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":394779,"byte_end":394790,"line_start":607,"line_end":607,"column_start":8,"column_end":19},"name":"multispace0","qualname":"::character::streaming::multispace0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces, tabs, carriage returns and line feeds.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1654},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/streaming.rs","byte_start":395770,"byte_end":395781,"line_start":634,"line_end":634,"column_start":8,"column_end":19},"name":"multispace1","qualname":"::character::streaming::multispace1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces, tabs, carriage returns and line feeds.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1658},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"complete","qualname":"::character::complete","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","parent":null,"children":[{"krate":0,"index":1659},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1667},{"krate":0,"index":1674},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1684},{"krate":0,"index":1691},{"krate":0,"index":1698},{"krate":0,"index":1701},{"krate":0,"index":1705},{"krate":0,"index":1708},{"krate":0,"index":1711},{"krate":0,"index":1714},{"krate":0,"index":1717},{"krate":0,"index":1721},{"krate":0,"index":1725},{"krate":0,"index":1729},{"krate":0,"index":1733},{"krate":0,"index":1737},{"krate":0,"index":1741},{"krate":0,"index":1745},{"krate":0,"index":1749},{"krate":0,"index":1753},{"krate":0,"index":1757},{"krate":0,"index":1761},{"krate":0,"index":1765},{"krate":0,"index":1769}],"decl_id":null,"docs":" Character specific parsers and combinators, complete input version.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1678},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":408989,"byte_end":408993,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"char","qualname":"::character::complete::char","value":"fn <I, Error> (c: char) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one character.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1684},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":409947,"byte_end":409953,"line_start":56,"line_end":56,"column_start":8,"column_end":14},"name":"one_of","qualname":"::character::complete::one_of","value":"fn <I, T, Error> (list: T) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one of the provided characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1691},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":410979,"byte_end":410986,"line_start":83,"line_end":83,"column_start":8,"column_end":15},"name":"none_of","qualname":"::character::complete::none_of","value":"fn <I, T, Error> (list: T) -> impl Fn(I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a character that is not in the provided characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1698},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":411983,"byte_end":411987,"line_start":114,"line_end":114,"column_start":8,"column_end":12},"name":"crlf","qualname":"::character::complete::crlf","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes the string \"\\r\\n\".","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1701},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":413020,"byte_end":413035,"line_start":150,"line_end":150,"column_start":8,"column_end":23},"name":"not_line_ending","qualname":"::character::complete::not_line_ending","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a string of any char except '\\r' or '\\n'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1705},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":414685,"byte_end":414696,"line_start":205,"line_end":205,"column_start":8,"column_end":19},"name":"line_ending","qualname":"::character::complete::line_ending","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an end of line (both '\\n' and '\\r\\n').","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1708},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":415930,"byte_end":415937,"line_start":243,"line_end":243,"column_start":8,"column_end":15},"name":"newline","qualname":"::character::complete::newline","value":"fn <I, Error> (input: I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a newline character '\\n'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1711},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":416668,"byte_end":416671,"line_start":270,"line_end":270,"column_start":8,"column_end":11},"name":"tab","qualname":"::character::complete::tab","value":"fn <I, Error> (input: I) -> IResult<I, char, Error>","parent":null,"children":[],"decl_id":null,"docs":" Matches a tab character '\\t'.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1714},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":417410,"byte_end":417417,"line_start":296,"line_end":296,"column_start":8,"column_end":15},"name":"anychar","qualname":"::character::complete::anychar","value":"fn <T, E> (input: T) -> IResult<T, char, E>","parent":null,"children":[],"decl_id":null,"docs":" Matches one byte as a character. Note that the input type will\n accept a `str`, but not a `&[u8]`, unlike many other nom parsers.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1717},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":418488,"byte_end":418494,"line_start":331,"line_end":331,"column_start":8,"column_end":14},"name":"alpha0","qualname":"::character::complete::alpha0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more lowercase and uppercase ASCII alphabetic characters: a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1721},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":419394,"byte_end":419400,"line_start":359,"line_end":359,"column_start":8,"column_end":14},"name":"alpha1","qualname":"::character::complete::alpha1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more lowercase and uppercase ASCII alphabetic characters: a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":419919,"byte_end":419925,"line_start":377,"line_end":377,"column_start":8,"column_end":14},"name":"digit0","qualname":"::character::complete::digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII numerical characters: 0-9\n fn parser(input: &str) -> IResult<&str, &str> {\n     digit0(input)\n }","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1729},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":420791,"byte_end":420797,"line_start":405,"line_end":405,"column_start":8,"column_end":14},"name":"digit1","qualname":"::character::complete::digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII numerical characters: 0-9","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1733},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":421627,"byte_end":421637,"line_start":432,"line_end":432,"column_start":8,"column_end":18},"name":"hex_digit0","qualname":"::character::complete::hex_digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII hexadecimal numerical characters: 0-9, A-F, a-f","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1737},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":422552,"byte_end":422562,"line_start":459,"line_end":459,"column_start":8,"column_end":18},"name":"hex_digit1","qualname":"::character::complete::hex_digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII hexadecimal numerical characters: 0-9, A-F, a-f","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1741},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":423361,"byte_end":423371,"line_start":487,"line_end":487,"column_start":8,"column_end":18},"name":"oct_digit0","qualname":"::character::complete::oct_digit0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more octal characters: 0-7","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1745},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":424249,"byte_end":424259,"line_start":515,"line_end":515,"column_start":8,"column_end":18},"name":"oct_digit1","qualname":"::character::complete::oct_digit1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more octal characters: 0-7","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1749},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":425108,"byte_end":425121,"line_start":543,"line_end":543,"column_start":8,"column_end":21},"name":"alphanumeric0","qualname":"::character::complete::alphanumeric0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more ASCII numerical and alphabetic characters: 0-9, a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1753},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":426056,"byte_end":426069,"line_start":571,"line_end":571,"column_start":8,"column_end":21},"name":"alphanumeric1","qualname":"::character::complete::alphanumeric1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more ASCII numerical and alphabetic characters: 0-9, a-z, A-Z","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1757},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":426856,"byte_end":426862,"line_start":599,"line_end":599,"column_start":8,"column_end":14},"name":"space0","qualname":"::character::complete::space0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces and tabs.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1761},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":427777,"byte_end":427783,"line_start":630,"line_end":630,"column_start":8,"column_end":14},"name":"space1","qualname":"::character::complete::space1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces and tabs.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1765},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":428689,"byte_end":428700,"line_start":664,"line_end":664,"column_start":8,"column_end":19},"name":"multispace0","qualname":"::character::complete::multispace0","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces, tabs, carriage returns and line feeds.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1769},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/complete.rs","byte_start":429699,"byte_end":429710,"line_start":695,"line_end":695,"column_start":8,"column_end":19},"name":"multispace1","qualname":"::character::complete::multispace1","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces, tabs, carriage returns and line feeds.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1773},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":368208,"byte_end":368221,"line_start":21,"line_end":21,"column_start":8,"column_end":21},"name":"is_alphabetic","qualname":"::character::is_alphabetic","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII alphabetic: A-Z, a-z","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":368191,"byte_end":368200,"line_start":20,"line_end":20,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1774},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":368513,"byte_end":368521,"line_start":35,"line_end":35,"column_start":8,"column_end":16},"name":"is_digit","qualname":"::character::is_digit","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII digit: 0-9","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":368496,"byte_end":368505,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1775},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":368889,"byte_end":368901,"line_start":51,"line_end":51,"column_start":8,"column_end":20},"name":"is_hex_digit","qualname":"::character::is_hex_digit","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII hex digit: 0-9, A-F, a-f","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":368872,"byte_end":368881,"line_start":50,"line_end":50,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":369286,"byte_end":369298,"line_start":66,"line_end":66,"column_start":8,"column_end":20},"name":"is_oct_digit","qualname":"::character::is_oct_digit","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII octal digit: 0-7","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":369269,"byte_end":369278,"line_start":65,"line_end":65,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1777},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":369684,"byte_end":369699,"line_start":82,"line_end":82,"column_start":8,"column_end":23},"name":"is_alphanumeric","qualname":"::character::is_alphanumeric","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":369667,"byte_end":369676,"line_start":81,"line_end":81,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1778},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":370048,"byte_end":370056,"line_start":98,"line_end":98,"column_start":8,"column_end":16},"name":"is_space","qualname":"::character::is_space","value":"fn (chr: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII space or tab","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":370031,"byte_end":370040,"line_start":97,"line_end":97,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":1779},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/whitespace.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"whitespace","qualname":"::whitespace","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/whitespace.rs","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795}],"decl_id":null,"docs":" Support for whitespace delimited formats","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16613,"byte_end":16625,"line_start":503,"line_end":503,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1797},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"number","qualname":"::number","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/mod.rs","parent":null,"children":[{"krate":0,"index":1798},{"krate":0,"index":1807},{"krate":0,"index":1934},{"krate":0,"index":4941},{"krate":0,"index":4955},{"krate":0,"index":4952},{"krate":0,"index":4953},{"krate":0,"index":4949},{"krate":0,"index":4950},{"krate":0,"index":4947},{"krate":0,"index":4946}],"decl_id":null,"docs":" parsers recognizing numbers\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16710,"byte_end":16722,"line_start":512,"line_end":512,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":1807},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"streaming","qualname":"::number::streaming","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","parent":null,"children":[{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1812},{"krate":0,"index":1817},{"krate":0,"index":1820},{"krate":0,"index":1823},{"krate":0,"index":1826},{"krate":0,"index":1829},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1838},{"krate":0,"index":1841},{"krate":0,"index":1844},{"krate":0,"index":1847},{"krate":0,"index":1850},{"krate":0,"index":1853},{"krate":0,"index":1856},{"krate":0,"index":1859},{"krate":0,"index":1862},{"krate":0,"index":1865},{"krate":0,"index":1868},{"krate":0,"index":1871},{"krate":0,"index":1874},{"krate":0,"index":1877},{"krate":0,"index":1880},{"krate":0,"index":1883},{"krate":0,"index":1886},{"krate":0,"index":1889},{"krate":0,"index":1892},{"krate":0,"index":1895},{"krate":0,"index":1898},{"krate":0,"index":1901},{"krate":0,"index":1904},{"krate":0,"index":1907},{"krate":0,"index":1910},{"krate":0,"index":1913},{"krate":0,"index":1916},{"krate":0,"index":1919},{"krate":0,"index":1923},{"krate":0,"index":1928},{"krate":0,"index":1931}],"decl_id":null,"docs":" parsers recognizing numbers, streaming version\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1835},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":496779,"byte_end":496784,"line_start":27,"line_end":27,"column_start":8,"column_end":13},"name":"be_u8","qualname":"::number::streaming::be_u8","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":496762,"byte_end":496771,"line_start":26,"line_end":26,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1838},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":497481,"byte_end":497487,"line_start":52,"line_end":52,"column_start":8,"column_end":14},"name":"be_u16","qualname":"::number::streaming::be_u16","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":497464,"byte_end":497473,"line_start":51,"line_end":51,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1841},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":498239,"byte_end":498245,"line_start":78,"line_end":78,"column_start":8,"column_end":14},"name":"be_u24","qualname":"::number::streaming::be_u24","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 3 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":498222,"byte_end":498231,"line_start":77,"line_end":77,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1844},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":499030,"byte_end":499036,"line_start":104,"line_end":104,"column_start":8,"column_end":14},"name":"be_u32","qualname":"::number::streaming::be_u32","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":499013,"byte_end":499022,"line_start":103,"line_end":103,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1847},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":499868,"byte_end":499874,"line_start":130,"line_end":130,"column_start":8,"column_end":14},"name":"be_u64","qualname":"::number::streaming::be_u64","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":499851,"byte_end":499860,"line_start":129,"line_end":129,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1850},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":500875,"byte_end":500882,"line_start":157,"line_end":157,"column_start":8,"column_end":15},"name":"be_u128","qualname":"::number::streaming::be_u128","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":500838,"byte_end":500847,"line_start":155,"line_end":155,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":500848,"byte_end":500867,"line_start":156,"line_end":156,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1853},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":502041,"byte_end":502046,"line_start":195,"line_end":195,"column_start":8,"column_end":13},"name":"be_i8","qualname":"::number::streaming::be_i8","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":502024,"byte_end":502033,"line_start":194,"line_end":194,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1856},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":502642,"byte_end":502648,"line_start":213,"line_end":213,"column_start":8,"column_end":14},"name":"be_i16","qualname":"::number::streaming::be_i16","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":502625,"byte_end":502634,"line_start":212,"line_end":212,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1859},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":503254,"byte_end":503260,"line_start":231,"line_end":231,"column_start":8,"column_end":14},"name":"be_i24","qualname":"::number::streaming::be_i24","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 3 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":503237,"byte_end":503246,"line_start":230,"line_end":230,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1862},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":504021,"byte_end":504027,"line_start":254,"line_end":254,"column_start":8,"column_end":14},"name":"be_i32","qualname":"::number::streaming::be_i32","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":504004,"byte_end":504013,"line_start":253,"line_end":253,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1865},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":504671,"byte_end":504677,"line_start":273,"line_end":273,"column_start":8,"column_end":14},"name":"be_i64","qualname":"::number::streaming::be_i64","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":504654,"byte_end":504663,"line_start":272,"line_end":272,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1868},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":505388,"byte_end":505395,"line_start":292,"line_end":292,"column_start":8,"column_end":15},"name":"be_i128","qualname":"::number::streaming::be_i128","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":505351,"byte_end":505360,"line_start":290,"line_end":290,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":505361,"byte_end":505380,"line_start":291,"line_end":291,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1871},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":505989,"byte_end":505994,"line_start":310,"line_end":310,"column_start":8,"column_end":13},"name":"le_u8","qualname":"::number::streaming::le_u8","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":505972,"byte_end":505981,"line_start":309,"line_end":309,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1874},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":506695,"byte_end":506701,"line_start":335,"line_end":335,"column_start":8,"column_end":14},"name":"le_u16","qualname":"::number::streaming::le_u16","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":506678,"byte_end":506687,"line_start":334,"line_end":334,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1877},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":507458,"byte_end":507464,"line_start":361,"line_end":361,"column_start":8,"column_end":14},"name":"le_u24","qualname":"::number::streaming::le_u24","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 3 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":507441,"byte_end":507450,"line_start":360,"line_end":360,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1880},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":508253,"byte_end":508259,"line_start":387,"line_end":387,"column_start":8,"column_end":14},"name":"le_u32","qualname":"::number::streaming::le_u32","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":508236,"byte_end":508245,"line_start":386,"line_end":386,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1883},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":509094,"byte_end":509100,"line_start":413,"line_end":413,"column_start":8,"column_end":14},"name":"le_u64","qualname":"::number::streaming::le_u64","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":509077,"byte_end":509086,"line_start":412,"line_end":412,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1886},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":510109,"byte_end":510116,"line_start":441,"line_end":441,"column_start":8,"column_end":15},"name":"le_u128","qualname":"::number::streaming::le_u128","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":510072,"byte_end":510081,"line_start":439,"line_end":439,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":510082,"byte_end":510101,"line_start":440,"line_end":440,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1889},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":511276,"byte_end":511281,"line_start":479,"line_end":479,"column_start":8,"column_end":13},"name":"le_i8","qualname":"::number::streaming::le_i8","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":511259,"byte_end":511268,"line_start":478,"line_end":478,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1892},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":511910,"byte_end":511916,"line_start":500,"line_end":500,"column_start":8,"column_end":14},"name":"le_i16","qualname":"::number::streaming::le_i16","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":511893,"byte_end":511902,"line_start":499,"line_end":499,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1895},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":512554,"byte_end":512560,"line_start":521,"line_end":521,"column_start":8,"column_end":14},"name":"le_i24","qualname":"::number::streaming::le_i24","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 3 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":512537,"byte_end":512546,"line_start":520,"line_end":520,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1898},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":513354,"byte_end":513360,"line_start":547,"line_end":547,"column_start":8,"column_end":14},"name":"le_i32","qualname":"::number::streaming::le_i32","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":513337,"byte_end":513346,"line_start":546,"line_end":546,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1901},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":514028,"byte_end":514034,"line_start":568,"line_end":568,"column_start":8,"column_end":14},"name":"le_i64","qualname":"::number::streaming::le_i64","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":514011,"byte_end":514020,"line_start":567,"line_end":567,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1904},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":514774,"byte_end":514781,"line_start":590,"line_end":590,"column_start":8,"column_end":15},"name":"le_i128","qualname":"::number::streaming::le_i128","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":514737,"byte_end":514746,"line_start":588,"line_end":588,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":514747,"byte_end":514766,"line_start":589,"line_end":589,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1907},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":515428,"byte_end":515434,"line_start":610,"line_end":610,"column_start":8,"column_end":14},"name":"be_f32","qualname":"::number::streaming::be_f32","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian 4 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":515411,"byte_end":515420,"line_start":609,"line_end":609,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1910},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":516166,"byte_end":516172,"line_start":633,"line_end":633,"column_start":8,"column_end":14},"name":"be_f64","qualname":"::number::streaming::be_f64","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian 8 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":516149,"byte_end":516158,"line_start":632,"line_end":632,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1913},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":516883,"byte_end":516889,"line_start":656,"line_end":656,"column_start":8,"column_end":14},"name":"le_f32","qualname":"::number::streaming::le_f32","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian 4 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":516866,"byte_end":516875,"line_start":655,"line_end":655,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1916},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":517629,"byte_end":517635,"line_start":679,"line_end":679,"column_start":8,"column_end":14},"name":"le_f64","qualname":"::number::streaming::le_f64","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian 8 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":517612,"byte_end":517621,"line_start":678,"line_end":678,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1919},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":518367,"byte_end":518374,"line_start":703,"line_end":703,"column_start":8,"column_end":15},"name":"hex_u32","qualname":"::number::streaming::hex_u32","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a hex-encoded integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":518350,"byte_end":518359,"line_start":702,"line_end":702,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1923},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":519624,"byte_end":519639,"line_start":746,"line_end":746,"column_start":8,"column_end":23},"name":"recognize_float","qualname":"::number::streaming::recognize_float","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a floating point number in text format and returns the corresponding part of the input","sig":null,"attributes":[{"value":"allow(unused_imports)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":519557,"byte_end":519581,"line_start":744,"line_end":744,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1928},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":522170,"byte_end":522175,"line_start":828,"line_end":828,"column_start":8,"column_end":13},"name":"float","qualname":"::number::streaming::float","value":"fn <T, E> (input: T) -> IResult<T, f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f32","sig":null,"attributes":[{"value":"cfg(feature = \"lexical\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":522135,"byte_end":522162,"line_start":827,"line_end":827,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":1931},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":524717,"byte_end":524723,"line_start":904,"line_end":904,"column_start":8,"column_end":14},"name":"double","qualname":"::number::streaming::double","value":"fn <T, E> (input: T) -> IResult<T, f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f64","sig":null,"attributes":[{"value":"cfg(feature = \"lexical\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/streaming.rs","byte_start":524682,"byte_end":524709,"line_start":903,"line_end":903,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":1934},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"complete","qualname":"::number::complete","value":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","parent":null,"children":[{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":1954},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":1987},{"krate":0,"index":1990},{"krate":0,"index":1993},{"krate":0,"index":1996},{"krate":0,"index":1999},{"krate":0,"index":2002},{"krate":0,"index":2005},{"krate":0,"index":2008},{"krate":0,"index":2011},{"krate":0,"index":2014},{"krate":0,"index":2017},{"krate":0,"index":2020},{"krate":0,"index":2023},{"krate":0,"index":2026},{"krate":0,"index":2029},{"krate":0,"index":2032},{"krate":0,"index":2035},{"krate":0,"index":2038},{"krate":0,"index":2041},{"krate":0,"index":2044},{"krate":0,"index":2047},{"krate":0,"index":2051},{"krate":0,"index":2056},{"krate":0,"index":2059}],"decl_id":null,"docs":" parsers recognizing numbers, complete input version\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1963},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":535244,"byte_end":535249,"line_start":30,"line_end":30,"column_start":8,"column_end":13},"name":"be_u8","qualname":"::number::complete::be_u8","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":535227,"byte_end":535236,"line_start":29,"line_end":29,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1966},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":535924,"byte_end":535930,"line_start":54,"line_end":54,"column_start":8,"column_end":14},"name":"be_u16","qualname":"::number::complete::be_u16","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":535907,"byte_end":535916,"line_start":53,"line_end":53,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1969},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":536660,"byte_end":536666,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"be_u24","qualname":"::number::complete::be_u24","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 3 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":536643,"byte_end":536652,"line_start":78,"line_end":78,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1972},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":537429,"byte_end":537435,"line_start":104,"line_end":104,"column_start":8,"column_end":14},"name":"be_u32","qualname":"::number::complete::be_u32","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":537412,"byte_end":537421,"line_start":103,"line_end":103,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1975},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":538244,"byte_end":538250,"line_start":129,"line_end":129,"column_start":8,"column_end":14},"name":"be_u64","qualname":"::number::complete::be_u64","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":538227,"byte_end":538236,"line_start":128,"line_end":128,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1978},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":539232,"byte_end":539239,"line_start":156,"line_end":156,"column_start":8,"column_end":15},"name":"be_u128","qualname":"::number::complete::be_u128","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian unsigned 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":539195,"byte_end":539204,"line_start":154,"line_end":154,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":539205,"byte_end":539224,"line_start":155,"line_end":155,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1981},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":540396,"byte_end":540401,"line_start":196,"line_end":196,"column_start":8,"column_end":13},"name":"be_i8","qualname":"::number::complete::be_i8","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":540379,"byte_end":540388,"line_start":195,"line_end":195,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1984},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":540995,"byte_end":541001,"line_start":216,"line_end":216,"column_start":8,"column_end":14},"name":"be_i16","qualname":"::number::complete::be_i16","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":540978,"byte_end":540987,"line_start":215,"line_end":215,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1987},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":541605,"byte_end":541611,"line_start":236,"line_end":236,"column_start":8,"column_end":14},"name":"be_i24","qualname":"::number::complete::be_i24","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 3 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":541588,"byte_end":541597,"line_start":235,"line_end":235,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1990},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":542370,"byte_end":542376,"line_start":261,"line_end":261,"column_start":8,"column_end":14},"name":"be_i32","qualname":"::number::complete::be_i32","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":542353,"byte_end":542362,"line_start":260,"line_end":260,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1993},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":543009,"byte_end":543015,"line_start":281,"line_end":281,"column_start":8,"column_end":14},"name":"be_i64","qualname":"::number::complete::be_i64","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":542992,"byte_end":543001,"line_start":280,"line_end":280,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1996},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":543719,"byte_end":543726,"line_start":302,"line_end":302,"column_start":8,"column_end":15},"name":"be_i128","qualname":"::number::complete::be_i128","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian signed 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":543682,"byte_end":543691,"line_start":300,"line_end":300,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":543692,"byte_end":543711,"line_start":301,"line_end":301,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1999},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":544310,"byte_end":544315,"line_start":322,"line_end":322,"column_start":8,"column_end":13},"name":"le_u8","qualname":"::number::complete::le_u8","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":544293,"byte_end":544302,"line_start":321,"line_end":321,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2002},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":544994,"byte_end":545000,"line_start":346,"line_end":346,"column_start":8,"column_end":14},"name":"le_u16","qualname":"::number::complete::le_u16","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":544977,"byte_end":544986,"line_start":345,"line_end":345,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2005},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":545734,"byte_end":545740,"line_start":371,"line_end":371,"column_start":8,"column_end":14},"name":"le_u24","qualname":"::number::complete::le_u24","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 3 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":545717,"byte_end":545726,"line_start":370,"line_end":370,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2008},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":546507,"byte_end":546513,"line_start":396,"line_end":396,"column_start":8,"column_end":14},"name":"le_u32","qualname":"::number::complete::le_u32","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":546490,"byte_end":546499,"line_start":395,"line_end":395,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2011},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":547326,"byte_end":547332,"line_start":421,"line_end":421,"column_start":8,"column_end":14},"name":"le_u64","qualname":"::number::complete::le_u64","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":547309,"byte_end":547318,"line_start":420,"line_end":420,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2014},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":548318,"byte_end":548325,"line_start":448,"line_end":448,"column_start":8,"column_end":15},"name":"le_u128","qualname":"::number::complete::le_u128","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], u128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian unsigned 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":548281,"byte_end":548290,"line_start":446,"line_end":446,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":548291,"byte_end":548310,"line_start":447,"line_end":447,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2017},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":549483,"byte_end":549488,"line_start":488,"line_end":488,"column_start":8,"column_end":13},"name":"le_i8","qualname":"::number::complete::le_i8","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i8, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":549466,"byte_end":549475,"line_start":487,"line_end":487,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2020},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":550086,"byte_end":550092,"line_start":508,"line_end":508,"column_start":8,"column_end":14},"name":"le_i16","qualname":"::number::complete::le_i16","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i16, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 2 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":550069,"byte_end":550078,"line_start":507,"line_end":507,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2023},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":550699,"byte_end":550705,"line_start":528,"line_end":528,"column_start":8,"column_end":14},"name":"le_i24","qualname":"::number::complete::le_i24","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 3 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":550682,"byte_end":550691,"line_start":527,"line_end":527,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2026},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":551468,"byte_end":551474,"line_start":553,"line_end":553,"column_start":8,"column_end":14},"name":"le_i32","qualname":"::number::complete::le_i32","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 4 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":551451,"byte_end":551460,"line_start":552,"line_end":552,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2029},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":552111,"byte_end":552117,"line_start":573,"line_end":573,"column_start":8,"column_end":14},"name":"le_i64","qualname":"::number::complete::le_i64","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 8 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":552094,"byte_end":552103,"line_start":572,"line_end":572,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2032},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":552825,"byte_end":552832,"line_start":594,"line_end":594,"column_start":8,"column_end":15},"name":"le_i128","qualname":"::number::complete::le_i128","value":"fn <'a, E> (i: &'a [u8]) -> IResult<&'a [u8], i128, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian signed 16 bytes integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":552788,"byte_end":552797,"line_start":592,"line_end":592,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":552798,"byte_end":552817,"line_start":593,"line_end":593,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2035},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":553443,"byte_end":553449,"line_start":614,"line_end":614,"column_start":8,"column_end":14},"name":"be_f32","qualname":"::number::complete::be_f32","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian 4 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":553426,"byte_end":553435,"line_start":613,"line_end":613,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2038},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":554149,"byte_end":554155,"line_start":637,"line_end":637,"column_start":8,"column_end":14},"name":"be_f64","qualname":"::number::complete::be_f64","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a big endian 8 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":554132,"byte_end":554141,"line_start":636,"line_end":636,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2041},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":554834,"byte_end":554840,"line_start":660,"line_end":660,"column_start":8,"column_end":14},"name":"le_f32","qualname":"::number::complete::le_f32","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian 4 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":554817,"byte_end":554826,"line_start":659,"line_end":659,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2044},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":555543,"byte_end":555549,"line_start":683,"line_end":683,"column_start":8,"column_end":14},"name":"le_f64","qualname":"::number::complete::le_f64","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a little endian 8 bytes floating point number","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":555526,"byte_end":555535,"line_start":682,"line_end":682,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2047},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":556253,"byte_end":556260,"line_start":707,"line_end":707,"column_start":8,"column_end":15},"name":"hex_u32","qualname":"::number::complete::hex_u32","value":"fn <'a, E> (input: &'a [u8]) -> IResult<&'a [u8], u32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a hex-encoded integer","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":556236,"byte_end":556245,"line_start":706,"line_end":706,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2051},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":557449,"byte_end":557464,"line_start":749,"line_end":749,"column_start":8,"column_end":23},"name":"recognize_float","qualname":"::number::complete::recognize_float","value":"fn <T, E> (input: T) -> IResult<T, T, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns the corresponding slice","sig":null,"attributes":[{"value":"allow(unused_imports)","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":557382,"byte_end":557406,"line_start":747,"line_end":747,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2056},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":559900,"byte_end":559905,"line_start":831,"line_end":831,"column_start":8,"column_end":13},"name":"float","qualname":"::number::complete::float","value":"fn <T, E> (input: T) -> IResult<T, f32, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f32","sig":null,"attributes":[{"value":"cfg(feature = \"lexical\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":559865,"byte_end":559892,"line_start":830,"line_end":830,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":2059},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":562341,"byte_end":562347,"line_start":905,"line_end":905,"column_start":8,"column_end":14},"name":"double","qualname":"::number::complete::double","value":"fn <T, E> (input: T) -> IResult<T, f64, E>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f64","sig":null,"attributes":[{"value":"cfg(feature = \"lexical\")","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/complete.rs","byte_start":562306,"byte_end":562333,"line_start":904,"line_end":904,"column_start":1,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4942},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/mod.rs","byte_start":485936,"byte_end":485939,"line_start":13,"line_end":13,"column_start":3,"column_end":6},"name":"Big","qualname":"::number::Endianness::Big","value":"Endianness::Big","parent":{"krate":0,"index":4941},"children":[],"decl_id":null,"docs":" big endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4944},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/mod.rs","byte_start":485963,"byte_end":485969,"line_start":15,"line_end":15,"column_start":3,"column_end":9},"name":"Little","qualname":"::number::Endianness::Little","value":"Endianness::Little","parent":{"krate":0,"index":4941},"children":[],"decl_id":null,"docs":" little endian\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4941},"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/mod.rs","byte_start":485904,"byte_end":485914,"line_start":11,"line_end":11,"column_start":10,"column_end":20},"name":"Endianness","qualname":"::number::Endianness","value":"Endianness::{Big, Little}","parent":null,"children":[{"krate":0,"index":4942},{"krate":0,"index":4944}],"decl_id":null,"docs":" Configurable endianness\n","sig":null,"attributes":[]}],"impls":[{"id":1,"kind":"Direct","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":25330,"byte_end":25342,"line_start":94,"line_end":94,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":32561,"byte_end":32570,"line_start":336,"line_end":336,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":46382,"byte_end":46388,"line_start":24,"line_end":24,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":47891,"byte_end":47894,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":62045,"byte_end":62046,"line_start":497,"line_end":497,"column_start":99,"column_end":100},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":97842,"byte_end":97856,"line_start":671,"line_end":671,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16325,"byte_end":16330,"line_start":479,"line_end":479,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":68}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16393,"byte_end":16403,"line_start":485,"line_end":485,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":473}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16426,"byte_end":16432,"line_start":487,"line_end":487,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":761}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16455,"byte_end":16463,"line_start":489,"line_end":489,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":806}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16486,"byte_end":16491,"line_start":491,"line_end":491,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":926}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16514,"byte_end":16521,"line_start":493,"line_end":493,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1140}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16545,"byte_end":16550,"line_start":496,"line_end":496,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1144}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/mod.rs","byte_start":275850,"byte_end":275859,"line_start":5,"line_end":5,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1161}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bytes/mod.rs","byte_start":275869,"byte_end":275877,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1293}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16573,"byte_end":16577,"line_start":498,"line_end":498,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1424}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/mod.rs","byte_start":351179,"byte_end":351188,"line_start":7,"line_end":7,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1430}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/bits/mod.rs","byte_start":351198,"byte_end":351206,"line_start":8,"line_end":8,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1464}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16601,"byte_end":16610,"line_start":501,"line_end":501,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1537}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":367947,"byte_end":367956,"line_start":8,"line_end":8,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1542}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/character/mod.rs","byte_start":367966,"byte_end":367974,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1658}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16634,"byte_end":16644,"line_start":504,"line_end":504,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1779}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/lib.rs","byte_start":16731,"byte_end":16737,"line_start":513,"line_end":513,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1797}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/mod.rs","byte_start":485792,"byte_end":485801,"line_start":6,"line_end":6,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1807}},{"kind":"Mod","span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/number/mod.rs","byte_start":485811,"byte_end":485819,"line_start":7,"line_end":7,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1934}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":22550,"byte_end":22555,"line_start":13,"line_end":13,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":69}},{"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":25330,"byte_end":25342,"line_start":94,"line_end":94,"column_start":27,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2062},"to":{"krate":0,"index":69}},{"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/error.rs","byte_start":32561,"byte_end":32570,"line_start":336,"line_end":336,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2095},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":46382,"byte_end":46388,"line_start":24,"line_end":24,"column_start":6,"column_end":12},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/internal.rs","byte_start":47891,"byte_end":47894,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":57145,"byte_end":57150,"line_start":335,"line_end":335,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":244}},{"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":60125,"byte_end":60130,"line_start":454,"line_end":454,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":278}},{"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/traits.rs","byte_start":62045,"byte_end":62046,"line_start":497,"line_end":497,"column_start":99,"column_end":100},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":293},"to":{"krate":0,"index":278}},{"span":{"file_name":"/Users/acrockett/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-5.0.1/src/combinator/mod.rs","byte_start":97842,"byte_end":97856,"line_start":671,"line_end":671,"column_start":29,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":729},"to":{"krate":4294967295,"index":4294967295}}]}